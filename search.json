[{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"shinyWidgets: R package to customize Shiny applications Copyright (C) 2020 Victor PERRIER  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. shinyWidgets Copyright (C) 2020 Victor PERRIER This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"libraries-used","dir":"","previous_headings":"","what":"Libraries used","title":"GNU General Public License","text":"shinyWidgets R package includes open source software components. following list components (full copies license agreements used components included ): Bootstrap Switch Mattia Larentis & Emanuele Emanuele, https://github.com/nostalgiaz/bootstrap-switch Awesome Bootstrap Checkbox Flatlogic, https://github.com/flatlogic/awesome-bootstrap-checkbox Bootstrap Twitter, Inc, Mark Otto, Jacob Thornton & Bootstrap contributors, https://github.com/twbs/bootstrap Bootstrap Select SnapAppointments, https://github.com/snapappointments/bootstrap-select Material switch design mouse0270, https://bootsnipp.com/snippets/xp0QM SweetAlert2 Limon Monte, https://github.com/sweetalert2/sweetalert2 multi.js Fabian Lindfors, https://github.com/Fabianlindfors/multi.js animate.css, https://github.com/daneden/animate.css bttn.css Ganapati V S, https://github.com/ganapativs/bttn.css jQuery Knob Anthony Terrien, https://github.com/aterrien/jQuery-Knob Pretty Checkbox Lokesh Rajendran, https://github.com/lokesh-coder/pretty-checkbox Spectrum Brian Grinstead, https://github.com/bgrins/spectrum noUISlider Leon Gersen, https://github.com/leongersen/noUiSlider Air-datepicker Timofey Marochkin, https://github.com/t1m0n/air-datepicker tippy.js atomiks & contributors, https://github.com/atomiks/tippyjs autoNumeric.js Robert Knothe & contributors, https://github.com/autoNumeric/autoNumeric Virtual Select Sa Si Dev, https://github.com/sa-si-dev/virtual-select treejs daweilv, https://github.com/daweilv/treejs","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"bootstrap-switch-license","dir":"","previous_headings":"","what":"Bootstrap Switch License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2013-2015 authors Bootstrap Switch Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"awesome-bootstrap-checkbox-license","dir":"","previous_headings":"","what":"Awesome Bootstrap Checkbox License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2014 flatlogic.com Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"bootstrap-license","dir":"","previous_headings":"","what":"Bootstrap License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2011-2014 Twitter, Inc Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"bootstrap-select-license","dir":"","previous_headings":"","what":"Bootstrap Select License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2012-2018 SnapAppointments, LLC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"sweet-alert-2-license","dir":"","previous_headings":"","what":"Sweet Alert 2 License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2014 Tristan Edwards & Limon Monte Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"multijs-license","dir":"","previous_headings":"","what":"multi.js License","title":"GNU General Public License","text":"Copyright 2017 Fabian Lindfors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"jquery-knob-license","dir":"","previous_headings":"","what":"jQuery Knob License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2013 Anthony Terrien Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"animate-license","dir":"","previous_headings":"","what":"animate License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2016 Daniel Eden Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"bttn-license","dir":"","previous_headings":"","what":"bttn License","title":"GNU General Public License","text":"MIT License Copyright (c) 2016 Ganapati V S Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"spectrum-license","dir":"","previous_headings":"","what":"Spectrum License","title":"GNU General Public License","text":"Copyright (c) Brian Grinstead Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"pretty-checkbox-license","dir":"","previous_headings":"","what":"pretty-checkbox License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2017 Lokesh Rajendran ( lokesh.aero@gmail.com ) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"air-datepicker-license","dir":"","previous_headings":"","what":"air-datepicker License","title":"GNU General Public License","text":"MIT License (MIT) Copyright (c) 2016 Timofey Marochkin Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"tippyjs-license","dir":"","previous_headings":"","what":"tippy.js License","title":"GNU General Public License","text":"MIT License Copyright (c) 2017-present atomiks Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"autonumericjs-license","dir":"","previous_headings":"","what":"autoNumeric.js License","title":"GNU General Public License","text":"Copyright 2009 Robert J. Knothe bob@decorplanit.com contributors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sub license, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"virtual-select-license","dir":"","previous_headings":"","what":"Virtual Select License","title":"GNU General Public License","text":"MIT License Copyright (c) 2021 Sa Si Dev Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/LICENSE.html","id":"treejs-license","dir":"","previous_headings":"","what":"treejs License","title":"GNU General Public License","text":"MIT License Copyright (c) 2018 david.lv Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Victor Perrier. Author, maintainer, copyright holder. Fanny Meyer. Author. David Granjon. Author. Ian Fellows. Contributor.            Methods mutating vertical tabs & updateMultiInput Wil Davis. Contributor.            numericRangeInput function Spencer Matthews. Contributor.            autoNumeric methods JavaScript CSS libraries authors. Contributor, copyright holder.            authors listed LICENSE.md","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perrier V, Meyer F, Granjon D (2023). shinyWidgets: Custom Inputs Widgets Shiny. https://github.com/dreamRs/shinyWidgets, https://dreamrs.github.io/shinyWidgets/.","code":"@Manual{,   title = {shinyWidgets: Custom Inputs Widgets for Shiny},   author = {Victor Perrier and Fanny Meyer and David Granjon},   year = {2023},   note = {https://github.com/dreamRs/shinyWidgets, https://dreamrs.github.io/shinyWidgets/}, }"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"shinywidgets","dir":"","previous_headings":"","what":"Custom Inputs Widgets for Shiny","title":"Custom Inputs Widgets for Shiny","text":"Extend widgets available shiny","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Custom Inputs Widgets for Shiny","text":"package provide custom widgets components enhance shiny applications. can replace classical checkboxes switch button, add colors radio buttons checkbox group, use buttons radio checkboxes. widget update method change value input server.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Custom Inputs Widgets for Shiny","text":"Install CRAN : install development version GitHub :","code":"install.packages(\"shinyWidgets\") # install.packages(\"remotes\") remotes::install_github(\"dreamRs/shinyWidgets\")"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Custom Inputs Widgets for Shiny","text":"gallery application included package. installed, use following command launch : live version available : http://shinyapps.dreamrs.fr/shinyWidgets","code":"shinyWidgets::shinyWidgetsGallery()"},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"single-checkbox","dir":"","previous_headings":"Widgets","what":"Single checkbox","title":"Custom Inputs Widgets for Shiny","text":"Bootstrap switch Turn checkboxes toggle switches : switchInput Material switch Turn checkboxes toggle switches : materialSwitch Pretty checkbox Pretty switch Pretty toggle","code":"switchInput(inputId = \"id\", value = TRUE) materialSwitch(inputId = \"id\", label = \"Primary switch\", status = \"danger\") prettyCheckbox(   inputId = \"id\", label = \"Check me!\", icon = icon(\"check\") ) prettySwitch(   inputId = \"id\",   label = \"Switch:\",   fill = TRUE,    status = \"primary\" ) prettyToggle(   inputId = \"id\",   label_on = \"Checked!\",   label_off = \"Unchecked...\" )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"checkboxes-and-radio-buttons","dir":"","previous_headings":"Widgets","what":"Checkboxes and radio buttons","title":"Custom Inputs Widgets for Shiny","text":"Bootstrap buttons checkboxGroupButtons Pretty checkbox group radio buttons","code":"checkboxGroupButtons( # or radioGroupButtons   inputId = \"id\",   label = \"Choice: \",   choices = c(\"A\", \"B\", \"C\") ) prettyCheckboxGroup( # or prettyRadioButtons   inputId = \"id\",   label = \"Choice\",   choices = c(\"A\", \"B\", \"c\"),   outline = TRUE,   plain = TRUE,   status = \"primary\",   icon = icon(\"check\") )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"select-menu","dir":"","previous_headings":"Widgets","what":"Select menu","title":"Custom Inputs Widgets for Shiny","text":"Bootstrap select picker Select menu lot configurations options available: pickerInput Virtual select Select menu can support long list choices: virtualSelectInput","code":"pickerInput(   inputId = \"id\",    label = \"Select:\",    choices = month.name,    options = pickerOptions(     actionsBox = TRUE,      size = 10,     selectedTextFormat = \"count > 3\"   ),    multiple = TRUE ) virtualSelectInput(   inputId = \"id\",   label = \"Select:\",   choices = list(     \"Spring\" = c(\"March\", \"April\", \"May\"),     \"Summer\" = c(\"June\", \"July\", \"August\"),     \"Autumn\" = c(\"September\", \"October\", \"November\"),     \"Winter\" = c(\"December\", \"January\", \"February\")   ),   showValueAsTags = TRUE,   search = TRUE,   multiple = TRUE )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"date-picker","dir":"","previous_headings":"Widgets","what":"Date picker","title":"Custom Inputs Widgets for Shiny","text":"Air Datepicker Date (month year) picker lot options timepicker integrated : airDatepickerInput","code":"airDatepickerInput(   inputId = \"id\",   label = \"Select:\",   placeholder = \"Placeholder\",   multiple = 5,    clearButton = TRUE )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"sliders","dir":"","previous_headings":"Widgets","what":"Sliders","title":"Custom Inputs Widgets for Shiny","text":"Slider Text Slider strings, pass whatever want: sliderText noUiSlider range slider can colored, two handles positioned vertically (among things): noUiSliderInput","code":"sliderTextInput(   inputId = \"id\",    label = \"Choice:\",    grid = TRUE,    force_edges = TRUE,   choices = c(     \"Strongly disagree\",     \"Disagree\",     \"Neither agree nor disagree\",      \"Agree\",      \"Strongly agree\"   ) ) noUiSliderInput(   inputId = \"id\",   label = \"Select:\",   min = 0,    max = 600,   value = c(100, 220, 400),   tooltips = TRUE,   step = 1 )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"tree","dir":"","previous_headings":"Widgets","what":"Tree","title":"Custom Inputs Widgets for Shiny","text":"Tree check Select value(s) hierarchical structure: treeInput","code":"treeInput(   inputId = \"ID2\",   label = \"Select cities:\",   choices = create_tree(cities),   returnValue = \"text\",   closeDepth = 1 )"},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"text","dir":"","previous_headings":"Widgets","what":"Text","title":"Custom Inputs Widgets for Shiny","text":"Search text input triggered hitting ‘Enter’ clicking search button : search_input","code":"searchInput(   inputId = \"id\",    label = \"Enter your search :\",    placeholder = \"This is a placeholder\",    btnSearch = icon(\"search\"),    btnReset = icon(\"remove\"),    width = \"100%\" )"},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"sweet-alert","dir":"","previous_headings":"Other functionnalities","what":"Sweet Alert","title":"Custom Inputs Widgets for Shiny","text":"Show alert message user provide feedback, via sweetalert2 library: sendSweetAlert See examples ?show_alert. Request confirmation user : confirmSweetAlert See examples ?ask_confirmation.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/index.html","id":"dropdown-button","dir":"","previous_headings":"Other functionnalities","what":"Dropdown button","title":"Custom Inputs Widgets for Shiny","text":"Hide input button : See also ?dropMenu()","code":"dropdownButton(   tags$h3(\"List of Input\"),   selectInput(inputId = 'xcol', label = 'X Variable', choices = names(iris)),   selectInput(inputId = 'ycol', label = 'Y Variable', choices = names(iris), selected = names(iris)[[2]]),   sliderInput(inputId = 'clusters', label = 'Cluster count', value = 3, min = 1, max = 9),   circle = TRUE,   status = \"danger\",    icon = icon(\"gear\"), width = \"300px\",   tooltip = tooltipOptions(title = \"Click to see inputs !\") )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionBttn.html","id":null,"dir":"Reference","previous_headings":"","what":"Awesome action button — actionBttn","title":"Awesome action button — actionBttn","text":"Like shiny::actionButton() awesome, via https://bttn.surge.sh/","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionBttn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Awesome action button — actionBttn","text":"","code":"actionBttn(   inputId,   label = NULL,   icon = NULL,   style = \"unite\",   color = \"default\",   size = \"md\",   block = FALSE,   no_outline = TRUE,   ... )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionBttn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Awesome action button — actionBttn","text":"inputId input slot used access value. label contents button, usually text label. icon optional icon appear button. style Style button, choose simple, bordered, minimal, stretch, jelly, gradient, fill, material-circle, material-flat, pill, float, unite. color Color button : default, primary, warning, danger, success, royal. size Size button : xs,sm, md, lg. block Logical, full width button. no_outline Logical, show outline navigating keyboard/interact using mouse touch. ... arguments pass container tag function.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionBttn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Awesome action button — actionBttn","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Awesome action button\"),   tags$br(),   actionBttn(     inputId = \"bttn1\",     label = \"Go!\",     color = \"primary\",     style = \"bordered\"   ),   tags$br(),   verbatimTextOutput(outputId = \"res_bttn1\"),   tags$br(),   actionBttn(     inputId = \"bttn2\",     label = \"Go!\",     color = \"success\",     style = \"material-flat\",     icon = icon(\"sliders\"),     block = TRUE   ),   tags$br(),   verbatimTextOutput(outputId = \"res_bttn2\") )  server <- function(input, output, session) {   output$res_bttn1 <- renderPrint(input$bttn1)   output$res_bttn2 <- renderPrint(input$bttn2) }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionGroupButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Actions Buttons Group Inputs — actionGroupButtons","title":"Actions Buttons Group Inputs — actionGroupButtons","text":"Create group actions buttons.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionGroupButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Actions Buttons Group Inputs — actionGroupButtons","text":"","code":"actionGroupButtons(   inputIds,   labels,   status = \"default\",   size = \"normal\",   direction = \"horizontal\",   fullwidth = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionGroupButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Actions Buttons Group Inputs — actionGroupButtons","text":"inputIds inputs slot used access value, one button. labels Labels buttons, must length inputIds. status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = 'myClass', buttons class btn-myClass. size Size buttons ('xs', 'sm', 'normal', 'lg'). direction Horizontal vertical. fullwidth TRUE, fill width parent div.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionGroupButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Actions Buttons Group Inputs — actionGroupButtons","text":"actions buttons group control can added UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/actionGroupButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Actions Buttons Group Inputs — actionGroupButtons","text":"","code":"if (interactive()) {   library(\"shiny\")   library(\"shinyWidgets\")    ui <- fluidPage(     br(),     actionGroupButtons(       inputIds = c(\"btn1\", \"btn2\", \"btn3\"),       labels = list(\"Action 1\", \"Action 2\", tags$span(icon(\"gear\"), \"Action 3\")),       status = \"primary\"     ),     verbatimTextOutput(outputId = \"res1\"),     verbatimTextOutput(outputId = \"res2\"),     verbatimTextOutput(outputId = \"res3\")   )    server <- function(input, output, session) {      output$res1 <- renderPrint(input$btn1)      output$res2 <- renderPrint(input$btn2)      output$res3 <- renderPrint(input$btn3)    }    shinyApp(ui = ui, server = server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a spinner above an output when this one recalculate — addSpinner","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"Display spinner output one recalculate","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"","code":"addSpinner(output, spin = \"double-bounce\", color = \"#112446\")"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"output output element, typically result renderPlot. spin Style spinner, choice : circle, bounce, folding-cube, rotating-plane, cube-grid, fading-circle, double-bounce, dots, cube. color Color spinner.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"list tags","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"spinner disappear page, masked plot, plot must non-transparent background. robust way insert loaders, see package \"shinycssloaders\".","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/addSpinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a spinner above an output when this one recalculate — addSpinner","text":"","code":"# wrap an output: addSpinner(shiny::plotOutput(\"plot\")) #> <div style=\"position: relative; width:100%; height:400px;\"> #>   <div class=\"spinner loading-spinner\"> #>     <div class=\"double-bounce1\" style=\"background-color: #112446;\"><\/div> #>     <div class=\"double-bounce2\" style=\"background-color: #112446;\"><\/div> #>   <\/div> #>   <div class=\"shiny-plot-output html-fill-item\" id=\"plot\" style=\"width:100%;height:400px;\"><\/div> #> <\/div>  # Complete demo:  if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Exemple spinners\"),   actionButton(inputId = \"refresh\", label = \"Refresh\", width = \"100%\"),   fluidRow(     column(       width = 5, offset = 1,       addSpinner(plotOutput(\"plot1\"), spin = \"circle\", color = \"#E41A1C\"),       addSpinner(plotOutput(\"plot3\"), spin = \"bounce\", color = \"#377EB8\"),       addSpinner(plotOutput(\"plot5\"), spin = \"folding-cube\", color = \"#4DAF4A\"),       addSpinner(plotOutput(\"plot7\"), spin = \"rotating-plane\", color = \"#984EA3\"),       addSpinner(plotOutput(\"plot9\"), spin = \"cube-grid\", color = \"#FF7F00\")     ),     column(       width = 5,       addSpinner(plotOutput(\"plot2\"), spin = \"fading-circle\", color = \"#FFFF33\"),       addSpinner(plotOutput(\"plot4\"), spin = \"double-bounce\", color = \"#A65628\"),       addSpinner(plotOutput(\"plot6\"), spin = \"dots\", color = \"#F781BF\"),       addSpinner(plotOutput(\"plot8\"), spin = \"cube\", color = \"#999999\")     )   ),   actionButton(inputId = \"refresh2\", label = \"Refresh\", width = \"100%\") )  server <- function(input, output, session) {    dat <- reactive({     input$refresh     input$refresh2     Sys.sleep(3)     Sys.time()   })    lapply(     X = seq_len(9),     FUN = function(i) {       output[[paste0(\"plot\", i)]] <- renderPlot({         dat()         plot(sin, -pi, i*pi)       })     }   )  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Air Date Picker Input — airDatepicker","title":"Air Date Picker Input — airDatepicker","text":"alternative shiny::dateInput() select single, multiple date range based Air Datepicker library. two alias select months years.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Air Date Picker Input — airDatepicker","text":"","code":"airDatepickerInput(   inputId,   label = NULL,   value = NULL,   multiple = FALSE,   range = FALSE,   timepicker = FALSE,   separator = \" - \",   placeholder = NULL,   dateFormat = \"yyyy-MM-dd\",   firstDay = NULL,   minDate = NULL,   maxDate = NULL,   disabledDates = NULL,   disabledDaysOfWeek = NULL,   highlightedDates = NULL,   view = c(\"days\", \"months\", \"years\"),   startView = NULL,   minView = c(\"days\", \"months\", \"years\"),   monthsField = c(\"monthsShort\", \"months\"),   clearButton = FALSE,   todayButton = FALSE,   autoClose = FALSE,   timepickerOpts = timepickerOptions(),   position = NULL,   update_on = c(\"change\", \"close\"),   onlyTimepicker = FALSE,   toggleSelected = TRUE,   addon = c(\"right\", \"left\", \"none\"),   addonAttributes = list(class = \"btn-outline-secondary\"),   language = \"en\",   inline = FALSE,   width = NULL )  timepickerOptions(   dateTimeSeparator = NULL,   timeFormat = NULL,   minHours = NULL,   maxHours = NULL,   minMinutes = NULL,   maxMinutes = NULL,   hoursStep = NULL,   minutesStep = NULL )  airMonthpickerInput(inputId, label = NULL, value = NULL, ...)  airYearpickerInput(inputId, label = NULL, value = NULL, ...)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Air Date Picker Input — airDatepicker","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value(s), dates character string accepted yyyy-mm-dd format, Date/POSIXct object. Can single value several values. multiple Select multiple dates. TRUE, one can select unlimited dates. numeric passed, amount selected dates limited . range Select date range. timepicker Add timepicker calendar select time. separator Separator dates several selected, default \" - \". placeholder character string giving user hint can entered control. dateFormat Format use display date(s), default \"yyyy-MM-dd\", see online documentation possible values. firstDay Day index week started. Possible values 0 6, 0 - Sunday 6 - Saturday. default value taken current localization, passed higher priority. minDate minimum allowed date. Either Date object, string yyyy-mm-dd format. maxDate maximum allowed date. Either Date object, string yyyy-mm-dd format. disabledDates vector dates disable, e.g. able select one dates passed. disabledDaysOfWeek Day(s) week disable, numbers 0 (Sunday) 6 (Saturday). highlightedDates vector dates highlight. view Starting view, one 'days' (default), 'months' 'years'. startView Date shown calendar date picker opened. minView Minimal view, one 'days' (default), 'months' 'years'. monthsField Names months view 'months', use 'monthsShort' abbreviations 'months' full names. clearButton TRUE, button \"Clear\" visible. todayButton TRUE, button \"Today\" visible set view current date, Date used, set view given date select .. autoClose TRUE, date selection, datepicker closed. timepickerOpts Options timepicker, see timepickerOptions. position calendar appear, two word string like 'bottom left' (default), 'top right', 'left top'. update_on send selected value server: 'change' calendar 'close'd. onlyTimepicker Display time picker. toggleSelected TRUE, range mode, possible select date start end. addon Display calendar icon 'right' 'left' widget, 'none'. icon act likes actionButton, can retrieve value server-side input$<inputId>_button. addonAttributes list() additional attributes use addon tag, like class example. language Language use, can one ar, cs, da, de, en, es, fi, fr, hu, , ja, ko, nl, pl, pt-BR, pt, ro, ru, si, sk, sv, th, tr, uk, zh. inline TRUE, datepicker always visible. width width input, e.g. '400px', '100%'. dateTimeSeparator Separator date time, default \" \". timeFormat Desirable time format. can use h (hours), hh (hours leading zero), (minutes), ii (minutes leading zero), aa (day period - '' 'pm'), AA (day period capitalized) minHours Minimal hours value, must 0 23. able choose value lower . maxHours Maximum hours value, must 0 23. able choose value higher . minMinutes Minimal minutes value, must 0 59. able choose value lower . maxMinutes Maximum minutes value, must 0 59. able choose value higher . hoursStep Hours step slider. minutesStep Minutes step slider. ... Arguments passed airDatepickerInput.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Air Date Picker Input — airDatepicker","text":"Date object POSIXct UTC timezone.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Air Date Picker Input — airDatepicker","text":"Since shinyWidgets 0.5.2 conflicts shiny::dateInput().","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/airDatepicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Air Date Picker Input — airDatepicker","text":"","code":"if (interactive()) {  # examples of different options to select dates: demoAirDatepicker(\"datepicker\")  # select month(s) demoAirDatepicker(\"months\")  # select year(s) demoAirDatepicker(\"years\")  # select date and time demoAirDatepicker(\"timepicker\")  # You can select multiple dates : library(shiny) library(shinyWidgets)  ui <- fluidPage(   airDatepickerInput(     inputId = \"multiple\",     label = \"Select multiple dates:\",     placeholder = \"You can pick 5 dates\",     multiple = 5, clearButton = TRUE   ),   verbatimTextOutput(\"res\") )  server <- function(input, output, session) {   output$res <- renderPrint(input$multiple) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animateOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate options — animateOptions","title":"Animate options — animateOptions","text":"Animate options","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animateOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate options — animateOptions","text":"","code":"animateOptions(enter = \"fadeInDown\", exit = \"fadeOutUp\", duration = 1)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animateOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate options — animateOptions","text":"enter Animation name appearance exit Animation name disappearance duration Duration animation","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animateOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate options — animateOptions","text":"list","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animateOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate options — animateOptions","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  dropdown(  \"Your contents goes here ! You can pass several elements\",  circle = TRUE, status = \"danger\", icon = icon(\"gear\"), width = \"300px\",  animate = animateOptions(enter = \"fadeInDown\", exit = \"fadeOutUp\", duration = 3) )  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animations.html","id":null,"dir":"Reference","previous_headings":"","what":"Animation names — animations","title":"Animation names — animations","text":"List animations categories","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animation names — animations","text":"","code":"animations"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Animation names — animations","text":"list lists","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/animations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Animation names — animations","text":"https://github.com/animate-css/animate.css","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/appendVerticalTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate Vertical Tabset Panel — appendVerticalTab","title":"Mutate Vertical Tabset Panel — appendVerticalTab","text":"Mutate Vertical Tabset Panel","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/appendVerticalTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate Vertical Tabset Panel — appendVerticalTab","text":"","code":"appendVerticalTab(inputId, tab, session = shiny::getDefaultReactiveDomain())  removeVerticalTab(inputId, index, session = shiny::getDefaultReactiveDomain())  reorderVerticalTabs(   inputId,   newOrder,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/appendVerticalTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate Vertical Tabset Panel — appendVerticalTab","text":"inputId id verticalTabsetPanel object. tab verticalTab append. session session object passed function given shinyServer. index index tab remove. newOrder new index order.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/appendVerticalTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate Vertical Tabset Panel — appendVerticalTab","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(    verticalTabsetPanel(     verticalTabPanel(\"blaa\",\"foo\"),     verticalTabPanel(\"yarp\",\"bar\"),     id=\"hippi\"   ) )  server <- function(input, output, session) {   appendVerticalTab(\"hippi\", verticalTabPanel(\"bipi\",\"long\"))   removeVerticalTab(\"hippi\", 1)   appendVerticalTab(\"hippi\", verticalTabPanel(\"howdy\",\"fair\"))   reorderVerticalTabs(\"hippi\", c(3,2,1)) }  # Run the application shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Autonumeric Input Widget — autonumericInput","title":"Autonumeric Input Widget — autonumericInput","text":"R wrapper javascript AutoNumeric library, formatting numeric inputs shiny applications.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autonumeric Input Widget — autonumericInput","text":"","code":"autonumericInput(   inputId,   label,   value,   width = NULL,   align = \"right\",   currencySymbol = NULL,   currencySymbolPlacement = NULL,   decimalCharacter = NULL,   digitGroupSeparator = NULL,   allowDecimalPadding = NULL,   decimalPlaces = NULL,   divisorWhenUnfocused = NULL,   rawValueDivisor = NULL,   formatOnPageLoad = NULL,   maximumValue = NULL,   minimumValue = NULL,   modifyValueOnWheel = NULL,   emptyInputBehavior = \"null\",   style = NULL,   ... )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autonumeric Input Widget — autonumericInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value (unformatted). width width input box, eg. \"200px\" \"100%\". align alignment text inside input box, one \"center\" (default), \"left\", \"right\". currencySymbol Defines currency symbol string. can string one character (allowing instance use space either side , example: '$ ' ' $'). Defaults \"\". currencySymbolPlacement Defines currency symbol placed, \"p\" prefix \"s\" suffix (default). decimalCharacter Defines decimal separator character used. Defaults \",\". digitGroupSeparator Defines decimal separator character used. Defaults \".\". allowDecimalPadding Defines decimal places padded zeros.  Defaults TRUE. decimalPlaces Defines default number decimal places show formatted value, keep precision. Must 0 positive integer. Defaults 2. divisorWhenUnfocused number divides element value blur.  focus, number multiplied back . Defaults NULL. rawValueDivisor Divides formatted value shown AutoNumeric element store divided result rawValue. Defaults 1. formatOnPageLoad Determine default value formatted initialization. Defaults TRUE. maximumValue Defines maximum possible value user can enter. minimumValue Defines minimum possible value user can enter. modifyValueOnWheel Allows user increment decrement element value mouse wheel. wheel behavior can modified wheelStep option. Defaults TRUE. emptyInputBehavior Defines displayed element raw value empty string ''. style CSS styles (character string) add <input> tag. ... Additional parameters can passed AutoNumeric.  See details information.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autonumeric Input Widget — autonumericInput","text":"autonumericInput object used UI function Shiny App.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autonumeric Input Widget — autonumericInput","text":"function wraps AutoNumeric.js library.  parameter documentation provided sufficient users, wishing use advanced configurations advised look documentation AutoNumeric GitHub repository. Alexandre Bonneau done wonderful job documenting parameters full explanations parameters associated values can found . ... parameter can take arguments listed AutoNumeric GitHub repository. quick reference follows: decimalPlacesRawValue - Defines many decimal places kept raw value. set NULL (default) decimalPlaces used. decimalPlacesShownOnBlur - Defines many decimal places visible element unfocused. NULL (default) decimalPlaces used. decimalPlacesShownOnFocus - Defines many decimal places visible element focus. NULL (default) decimalPlaces used. digitalGroupSpacing - Defines many numbers grouped together thousands separator groupings.  Must one c(\"2\", \"2s\", \"3\", \"4\"). Defaults 3. alwaysAllowDecimalCharacter - Defines decimal character decimal character alternative accepted already decimal character shown element. set TRUE, decimal character input accepted subsequently modify decimal character position, well rawValue. set FALSE, decimal character alternative key dropped. default setting. createLocalList - Defines local list AutoNumeric objects kept initializing object. Defaults TRUE. decimalCharacterAlternative - Allow declare alternative decimal separator automatically replaced decimalCharacter typed. useful countries use comma ',' decimal character keyboards numeric pads providing period '.' decimal character (France Spain instance). Must NULL (default), \",\", \".\". emptyInputBehavior - Defines displayed element raw value missing. One c(NULL, \"focus\", \"press\", \"always\", \"min\", \"max\", \"zero\") custom value. Defaults NULL.  See AutoNumeric GitHub repository full details. selectNumberOnly - Determine select keyboard command select complete input text, input numeric value. Defaults TRUE. selectOnFocus - Defines element value selected focus. Note: selection done using selectNumberOnly option. Defaults TRUE. eventBubbles - Defines custom native events triggered AutoNumeric bubble . Defaults TRUE. eventIsCancelable - Defines custom native events triggered AutoNumeric cancelable. Defaults TRUE. formulaMode - Defines formula mode can activated user. set true, user can enter formula mode entering '=' character. user allowed enter simple math formula using numeric characters well following operators: +, -, *, /, ( ). formula mode exited user either validate math expression using Enter key, element blurred. Defaults FALSE. historySize - Set undo/redo history table size. Defaults 20. isCancellable - Allow user cancel undo changes made given autonumeric-managed element, pressing Escape key. Defaults TRUE. leadingZero - options describes entering 0 far left numbers allowed, superfluous zeroes kept input blurred. One c(\"allow\", \"deny\", \"keep\"). Defaults \"deny\". See AutoNumeric GitHub repository full details. wheelOn - Defines wheel event increment decrement element value. One c(\"focus\", \"hover\"). Defaults \"focus\". wheelStep - Defines much element value incremented/decremented wheel event. Can set value string \"progressive\" determines step size input. Defaults \"progressive\". negativeBracketsTypeOnBlur - Adds brackets-like characters negative values unfocused. brackets visible field focus. left right symbols enclosed quotes separated comma. Defaults NULL. negativePositiveSignPlacement - Placement negative/positive sign relative currencySymbol option. One c(\"p\", \"s\", \"l\", \"r\", NULL), defaults NULL. See AutoNumeric GitHub repository documentation. negativeSignCharacter - Defines negative sign symbol use. Must single character non-numeric. Defaults \"-\". positiveSignCharacter - Defines positive sign symbol use. Must single character non-numeric. Defaults \"+\". showPositiveSign - Allow positive sign symbol positiveSignCharacter displayed positive numbers. Defaults FALSE. onInvalidPaste - Manage autoNumeric react user tries paste invalid number. One c(\"error\", \"ignore\", \"clamp\", \"truncate\", \"replace\"). Defaults \"error\". overrideMinMaxLimits - Override minimum maximum limits. Must one c(\"ceiling\", \"floor\", \"ignore\", NULL). Defaults \"ceiling\". readOnly - Defines element (<input> another allowed html tag) set read initialization. Defaults FALSE. roundingMethod - Defines rounding method use. One c(\"S\", \"\", \"s\", \"\", \"B\", \"U\", \"D\", \"C\", \"F\", \"N05\", \"CHF\", \"U05\", \"D05\"). Defaults \"S\".  See AutoNumeric GitHub repository documentation. saveValueToSessionStorage - Set TRUE allow decimalPlacesShownOnFocus value saved sessionStorage. Defaults FALSE. serializeSpaces - Defines serialize functions treat spaces.  Either \"+\" (default) \"\\ showOnlyNumbersOnFocus - Defines element value converted raw value focus mouseenter, (back formatted blur mouseleave). Defaults FALSE. showWarnings - Defines warnings shown console. Defaults TRUE. styleRules - Defines rules calculate CSS class(es) apply element, based raw unformatted value. Defaults NULL. suffixText - Add text right hand side element value. suffix text can characters string, except numeric characters negative positive sign. Defaults NULL. symbolWhenUnfocused - Defines symbol placed suffix focus hovered. Defaults NULL. unformatOnHover - Defines element value unformatted user hover mouse holding Alt key. Defaults TRUE. valuesToStrings - Provides way automatically replacing formatted value pre-defined string, raw value equal specific value. Defaults NULL. watchExternalChanges - Defines AutoNumeric element watch external changes made without using .set(). Defaults FALSE.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Autonumeric Input Widget — autonumericInput","text":"Bonneau, Alexandre. 2018. \"AutoNumeric.js javascript Package\". http://autonumeric.org","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/autonumericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autonumeric Input Widget — autonumericInput","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     h1(\"Autonumeric Inputs\"),     br(),     autonumericInput(       inputId = \"id1\",       label = \"Default Input\",       value = 1234.56     ),     verbatimTextOutput(\"res1\"),      autonumericInput(       inputId = \"id2\",       label = \"Custom Thousands of Dollars Input\",       value = 1234.56,       align = \"right\",       currencySymbol = \"$\",       currencySymbolPlacement = \"p\",       decimalCharacter = \".\",       digitGroupSeparator = \",\",       divisorWhenUnfocused = 1000,       symbolWhenUnfocused = \"K\"     ),     verbatimTextOutput(\"res2\"),      autonumericInput(       inputId = \"id3\",       label = \"Custom Millions of Euros Input with Positive Sign\",       value = 12345678910,       align = \"right\",       currencySymbol = \"\\u20ac\",       currencySymbolPlacement = \"s\",       decimalCharacter = \",\",       digitGroupSeparator = \".\",       divisorWhenUnfocused = 1000000,       symbolWhenUnfocused = \" (millions)\",       showPositiveSign = TRUE     ),     verbatimTextOutput(\"res3\")   )    server <- function(input, output, session) {     output$res1 <- renderPrint(input$id1)     output$res2 <- renderPrint(input$id2)     output$res3 <- renderPrint(input$id3)   }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Awesome Checkbox Input Control — awesomeCheckbox","title":"Awesome Checkbox Input Control — awesomeCheckbox","text":"Create Font Awesome Bootstrap checkbox can used specify logical values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Awesome Checkbox Input Control — awesomeCheckbox","text":"","code":"awesomeCheckbox(   inputId,   label,   value = FALSE,   status = \"primary\",   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Awesome Checkbox Input Control — awesomeCheckbox","text":"inputId input slot used access value. label Input label. value Initial value (TRUE FALSE). status Color buttons, valid Bootstrap status : default, primary, info, success, warning, danger. width width input","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Awesome Checkbox Input Control — awesomeCheckbox","text":"checkbox control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Awesome Checkbox Input Control — awesomeCheckbox","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(  awesomeCheckbox(inputId = \"somevalue\",                  label = \"A single checkbox\",                  value = TRUE,                  status = \"danger\"),  verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({ input$somevalue }) } shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckboxGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","title":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","text":"Create Font Awesome Bootstrap checkbox can used specify logical values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckboxGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","text":"","code":"awesomeCheckboxGroup(   inputId,   label,   choices,   selected = NULL,   inline = FALSE,   status = \"primary\",   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckboxGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","text":"inputId input slot used access value. label Input label. choices List values show checkboxes . selected values initially selected, . inline TRUE, render choices inline (.e. horizontally) status Color buttons width width input","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckboxGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","text":"checkbox control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeCheckboxGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Awesome Checkbox Group Input Control — awesomeCheckboxGroup","text":"","code":"if (interactive()) {   ui <- fluidPage(   br(),   awesomeCheckboxGroup(     inputId = \"id1\", label = \"Make a choice:\",     choices = c(\"graphics\", \"ggplot2\")   ),   verbatimTextOutput(outputId = \"res1\"),   br(),   awesomeCheckboxGroup(     inputId = \"id2\", label = \"Make a choice:\",     choices = c(\"base\", \"dplyr\", \"data.table\"),     inline = TRUE, status = \"danger\"   ),   verbatimTextOutput(outputId = \"res2\") )  server <- function(input, output, session) {    output$res1 <- renderPrint({     input$id1   })    output$res2 <- renderPrint({     input$id2   })  }  shinyApp(ui = ui, server = server)   }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeRadio.html","id":null,"dir":"Reference","previous_headings":"","what":"Awesome Radio Buttons Input Control — awesomeRadio","title":"Awesome Radio Buttons Input Control — awesomeRadio","text":"Create set prettier radio buttons used select item list.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeRadio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Awesome Radio Buttons Input Control — awesomeRadio","text":"","code":"awesomeRadio(   inputId,   label,   choices,   selected = NULL,   inline = FALSE,   status = \"primary\",   checkbox = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeRadio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Awesome Radio Buttons Input Control — awesomeRadio","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select (elements list named name rather value displayed user) selected initially selected value (specified defaults first value). inline TRUE, render choices inline (.e. horizontally). status Color buttons, valid Bootstrap status : default, primary, info, success, warning, danger. checkbox Logical, render radio like checkboxes (square shape). width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeRadio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Awesome Radio Buttons Input Control — awesomeRadio","text":"set radio buttons can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/awesomeRadio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Awesome Radio Buttons Input Control — awesomeRadio","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   br(),   awesomeRadio(     inputId = \"id1\", label = \"Make a choice:\",     choices = c(\"graphics\", \"ggplot2\")   ),   verbatimTextOutput(outputId = \"res1\"),   br(),   awesomeRadio(     inputId = \"id2\", label = \"Make a choice:\",     choices = c(\"base\", \"dplyr\", \"data.table\"),     inline = TRUE, status = \"danger\"   ),   verbatimTextOutput(outputId = \"res2\") )  server <- function(input, output, session) {    output$res1 <- renderPrint({     input$id1   })    output$res2 <- renderPrint({     input$id2   })  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/bootstrap-utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap panel / alert — bootstrap-utils","title":"Bootstrap panel / alert — bootstrap-utils","text":"Create panel (box) basic border padding, can use Bootstrap status style panel, see https://getbootstrap.com/docs/3.4/components/#panels.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/bootstrap-utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap panel / alert — bootstrap-utils","text":"","code":"panel(   ...,   heading = NULL,   footer = NULL,   extra = NULL,   status = c(\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\") )  alert(   ...,   status = c(\"info\", \"success\", \"danger\", \"warning\"),   dismissible = FALSE )  list_group(...)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/bootstrap-utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap panel / alert — bootstrap-utils","text":"... UI elements include inside panel alert. heading Title panel plain header. footer Footer panel. extra Additional elements include like table list_group, see examples. status Bootstrap status contextual alternative. dismissible Adds possibility close alert.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/bootstrap-utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap panel / alert — bootstrap-utils","text":"UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/bootstrap-utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap panel / alert — bootstrap-utils","text":"","code":"# Panels ---------------------------------  library(shiny) library(shinyWidgets)  ui <- fluidPage(   # Try with different Bootstrap version   # theme = bslib::bs_theme(version = 5),    tags$h2(\"Bootstrap panel\"),    # Default   panel(     \"Content goes here\",   ),   panel(     \"With status\",     status = \"primary\"   ),    # With header and footer   panel(     \"Content goes here\",     heading = \"My title\",     footer = \"Something\"   ),    # With status   panel(     \"Content goes here\",     heading = \"My title\",     status = \"primary\"   ),    # With table   panel(     heading = \"A famous table\",     extra = tableOutput(outputId = \"table\")   ),    # With list group   panel(     heading = \"A list of things\",     extra = list_group(       \"First item\",       \"Second item\",       \"And third item\"     )   ) )  server <- function(input, output, session) {    output$table <- renderTable({     head(mtcars)   }, width = \"100%\")  }  if (interactive())   shinyApp(ui = ui, server = server)      # Alerts ---------------------------------  library(shiny) library(shinyWidgets)  ui <- fluidPage(    # Try with different Bootstrap version   # theme = bslib::bs_theme(version = 5),    tags$h2(\"Alerts\"),   fluidRow(     column(       width = 6,       alert(         status = \"success\",         tags$b(\"Well done!\"), \"You successfully read this important alert message.\"       ),       alert(         status = \"info\",         tags$b(\"Heads up!\"), \"This alert needs your attention, but it's not super important.\"       ),       alert(         status = \"info\",         dismissible = TRUE,         tags$b(\"Dismissable\"), \"You can close this one.\"       )     ),     column(       width = 6,       alert(         status = \"warning\",         tags$b(\"Warning!\"), \"Better check yourself, you're not looking too good.\"       ),       alert(         status = \"danger\",         tags$b(\"Oh snap!\"), \"Change a few things up and try submitting again.\"       )     )   ) )  server <- function(input, output, session) {  }  if (interactive())   shinyApp(ui, server)    # List group -----------------------------  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"List group\"),    tags$b(\"List of item:\"),   list_group(     \"First item\",     \"Second item\",     \"And third item\"   ),    tags$b(\"Set active item:\"),   list_group(     list(class = \"active\", \"First item\"),     \"Second item\",     \"And third item\"   ) )  server <- function(input, output, session) {  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/checkboxGroupButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Buttons Group checkbox Input Control — checkboxGroupButtons","title":"Buttons Group checkbox Input Control — checkboxGroupButtons","text":"Create buttons grouped act like checkboxes.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/checkboxGroupButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buttons Group checkbox Input Control — checkboxGroupButtons","text":"","code":"checkboxGroupButtons(   inputId,   label = NULL,   choices = NULL,   selected = NULL,   status = \"default\",   size = \"normal\",   direction = \"horizontal\",   justified = FALSE,   individual = FALSE,   checkIcon = list(),   width = NULL,   choiceNames = NULL,   choiceValues = NULL,   disabled = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/checkboxGroupButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buttons Group checkbox Input Control — checkboxGroupButtons","text":"inputId input slot used access value. label Display label control, NULL label. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = \"custom-class\", buttons class btn-custom-class. size Size buttons ('xs', 'sm', 'normal', 'lg') direction Horizontal vertical justified TRUE, fill width parent div individual TRUE, buttons separated. checkIcon list, empty must contain least one element named 'yes' corresponding icon display button checked. width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. disabled Initialize buttons disabled state (users able select value).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/checkboxGroupButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Buttons Group checkbox Input Control — checkboxGroupButtons","text":"buttons group control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/checkboxGroupButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Buttons Group checkbox Input Control — checkboxGroupButtons","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"checkboxGroupButtons examples\"),    checkboxGroupButtons(     inputId = \"somevalue1\",     label = \"Make a choice: \",     choices = c(\"A\", \"B\", \"C\")   ),   verbatimTextOutput(\"value1\"),    checkboxGroupButtons(     inputId = \"somevalue2\",     label = \"With custom status:\",     choices = names(iris),     status = \"primary\"   ),   verbatimTextOutput(\"value2\"),    checkboxGroupButtons(     inputId = \"somevalue3\",     label = \"With icons:\",     choices = names(mtcars),     checkIcon = list(       yes = icon(\"square-check\"),       no = icon(\"square\")     )   ),   verbatimTextOutput(\"value3\") )  server <- function(input, output) {    output$value1 <- renderPrint({ input$somevalue1 })   output$value2 <- renderPrint({ input$somevalue2 })   output$value3 <- renderPrint({ input$somevalue3 })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/chooseSliderSkin.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme selector for sliderInput — chooseSliderSkin","title":"Theme selector for sliderInput — chooseSliderSkin","text":"Customize appearance original shiny's sliderInput","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/chooseSliderSkin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme selector for sliderInput — chooseSliderSkin","text":"","code":"chooseSliderSkin(   skin = c(\"Shiny\", \"Flat\", \"Big\", \"Modern\", \"Sharp\", \"Round\", \"Square\"),   color = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/chooseSliderSkin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme selector for sliderInput — chooseSliderSkin","text":"skin skin apply. Choose among 5 different flavors, namely 'Shiny', 'Flat', 'Modern', 'Round' 'Square'. color color apply sliders. Works following skins: 'Shiny', 'Flat', 'Modern', 'HTML5'. 'Flat' CSS filter applied, desired color maybe little offset.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/chooseSliderSkin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Theme selector for sliderInput — chooseSliderSkin","text":"currently possible apply multiple themes time.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/chooseSliderSkin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme selector for sliderInput — chooseSliderSkin","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  # With Modern design  ui <- fluidPage(   chooseSliderSkin(\"Modern\"),   sliderInput(\"obs\", \"Customized single slider:\",               min = 0, max = 100, value = 50   ),   sliderInput(\"obs2\", \"Customized range slider:\",               min = 0, max = 100, value = c(40, 80)   ),   plotOutput(\"distPlot\") )  server <- function(input, output) {    output$distPlot <- renderPlot({     hist(rnorm(input$obs))   })  }  shinyApp(ui, server)    # Use Flat design & a custom color  ui <- fluidPage(   chooseSliderSkin(\"Flat\", color = \"#112446\"),   sliderInput(\"obs\", \"Customized single slider:\",               min = 0, max = 100, value = 50   ),   sliderInput(\"obs2\", \"Customized range slider:\",               min = 0, max = 100, value = c(40, 80)   ),   sliderInput(\"obs3\", \"An other slider:\",               min = 0, max = 100, value = 50   ),   plotOutput(\"distPlot\") )  server <- function(input, output) {    output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/circleButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Circle Action button — circleButton","title":"Circle Action button — circleButton","text":"Create rounded action button.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/circleButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circle Action button — circleButton","text":"","code":"circleButton(inputId, icon = NULL, status = \"default\", size = \"default\", ...)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/circleButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circle Action button — circleButton","text":"inputId input slot used access value. icon icon appear button. status Color button. size Size button : default, lg, sm, xs. ... Named attributes applied button.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/circleButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circle Action button — circleButton","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h3(\"Rounded actionBution\"),     circleButton(inputId = \"btn1\", icon = icon(\"gear\")),     circleButton(       inputId = \"btn2\",       icon = icon(\"sliders\"),       status = \"primary\"     ),     verbatimTextOutput(\"res1\"),     verbatimTextOutput(\"res2\")   )    server <- function(input, output, session) {      output$res1 <- renderPrint({       paste(\"value button 1:\", input$btn1)     })     output$res2 <- renderPrint({       paste(\"value button 2:\", input$btn2)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/closeSweetAlert.html","id":null,"dir":"Reference","previous_headings":"","what":"Close Sweet Alert — closeSweetAlert","title":"Close Sweet Alert — closeSweetAlert","text":"Close Sweet Alert","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/closeSweetAlert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close Sweet Alert — closeSweetAlert","text":"","code":"closeSweetAlert(session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/closeSweetAlert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close Sweet Alert — closeSweetAlert","text":"session session object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Pickr — colorPickr","title":"Color Pickr — colorPickr","text":"widget pick color different themes options.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Pickr — colorPickr","text":"","code":"colorPickr(   inputId,   label,   selected = \"#112446\",   swatches = NULL,   preview = TRUE,   hue = TRUE,   opacity = FALSE,   interaction = NULL,   theme = c(\"classic\", \"monolith\", \"nano\"),   update = c(\"save\", \"changestop\", \"change\", \"swatchselect\"),   position = \"bottom-middle\",   hideOnSave = TRUE,   useAsButton = FALSE,   inline = FALSE,   i18n = NULL,   pickr_width = NULL,   width = NULL )  updateColorPickr(   session = getDefaultReactiveDomain(),   inputId,   value = NULL,   action = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Pickr — colorPickr","text":"inputId id input object. label Display label color pickr, NULL label. selected Default selected value. swatches Optional color swatches. NULL, swatches disabled. preview Display comparison previous state new color. hue Display hue slider. opacity Display opacity slider. interaction List parameters show hide components bottom interaction bar. See link documentation. theme theme want use. Can 'classic', 'monolith' 'nano'. update update value server-side. position Defines position color-picker. hideOnSave Hide color-picker selecting color. useAsButton Show color-picker button instead input value displayed. inline Always show color-picker page full element. i18n List translations labels, see online documentation. pickr_width Color-picker width (correspond popup window). width Color-picker width (correspond input). session session object passed function given shinyServer. value value set input object. action Action performon color-picker: enable, disable, show hide.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Pickr — colorPickr","text":"color picker input widget can added UI shiny app. return value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Color Pickr — colorPickr","text":"Widget based JS library pickr Simonwep. See online documentation information: https://github.com/Simonwep/pickr.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorPickr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Pickr — colorPickr","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Color pickr\"),   fluidRow(     column(       width = 4,       tags$h4(\"Appearance\"),       colorPickr(         inputId = \"id1\",         label = \"Pick a color (classic theme):\",         width = \"100%\"       ),       verbatimTextOutput(\"res1\"),       colorPickr(         inputId = \"id2\",         label = \"Pick a color (monolith theme):\",         theme = \"monolith\",         width = \"100%\"       ),       verbatimTextOutput(\"res2\"),       colorPickr(         inputId = \"id3\",         label = \"Pick a color (nano theme):\",         theme = \"nano\",         width = \"100%\"       ),       verbatimTextOutput(\"res3\"),       colorPickr(         inputId = \"id4\",         label = \"Pick a color (swatches + opacity):\",         swatches = scales::viridis_pal()(10),         opacity = TRUE       ),       verbatimTextOutput(\"res4\"),       colorPickr(         inputId = \"id5\",         label = \"Pick a color (only swatches):\",         selected = \"#440154\",         swatches = c(           scales::viridis_pal()(9),           scales::brewer_pal(palette = \"Blues\")(9),           scales::brewer_pal(palette = \"Reds\")(9)         ),         update = \"change\",         opacity = FALSE,         preview = FALSE,         hue = FALSE,         interaction = list(           hex= FALSE,           rgba = FALSE,           input = FALSE,           save = FALSE,           clear = FALSE         ),         pickr_width = \"245px\"       ),       verbatimTextOutput(\"res5\"),       colorPickr(         inputId = \"id6\",         label = \"Pick a color (button):\",         swatches = scales::viridis_pal()(10),         theme = \"monolith\",         useAsButton = TRUE       ),       verbatimTextOutput(\"res6\"),       colorPickr(         inputId = \"id7\",         label = \"Pick a color (inline):\",         swatches = scales::viridis_pal()(10),         theme = \"monolith\",         inline = TRUE,         width = \"100%\"       ),       verbatimTextOutput(\"res7\")     ),     column(       width = 4,       tags$h4(\"Trigger server update\"),       colorPickr(         inputId = \"id11\",         label = \"Pick a color (update on save):\",         position = \"right-start\"       ),       verbatimTextOutput(\"res11\"),       colorPickr(         inputId = \"id12\",         label = \"Pick a color (update on change):\",         update = \"change\",         interaction = list(           clear = FALSE,           save = FALSE         ),         position = \"right-start\"       ),       verbatimTextOutput(\"res12\"),       colorPickr(         inputId = \"id13\",         label = \"Pick a color (update on change stop):\",         update = \"changestop\",         interaction = list(           clear = FALSE,           save = FALSE         ),         position = \"right-start\"       ),       verbatimTextOutput(\"res13\")     ),     column(       width = 4,       tags$h4(\"Update server-side\"),       colorPickr(         inputId = \"id21\",         label = \"Pick a color (update value):\",         width = \"100%\"       ),       verbatimTextOutput(\"res21\"),       actionButton(\"red\", \"Update red\"),       actionButton(\"green\", \"Update green\"),       actionButton(\"blue\", \"Update blue\"),       colorPickr(         inputId = \"id22\",         label = \"Pick a color (enable/disable):\",         width = \"100%\"       ),       verbatimTextOutput(\"res22\"),       actionButton(\"enable\", \"Enable\"),       actionButton(\"disable\", \"Disable\")     )   ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$id1)   output$res2 <- renderPrint(input$id2)   output$res3 <- renderPrint(input$id3)   output$res4 <- renderPrint(input$id4)   output$res5 <- renderPrint(input$id5)   output$res6 <- renderPrint(input$id6)   output$res7 <- renderPrint(input$id7)    output$res11 <- renderPrint(input$id11)   output$res12 <- renderPrint(input$id12)   output$res13 <- renderPrint(input$id13)    output$res21 <- renderPrint(input$id21)   observeEvent(input$red, {     updateColorPickr(session, \"id21\", \"firebrick\")   })   observeEvent(input$green, {     updateColorPickr(session, \"id21\", \"forestgreen\")   })   observeEvent(input$blue, {     updateColorPickr(session, \"id21\", \"steelblue\")   })    output$res22 <- renderPrint(input$id22)   observeEvent(input$enable, {     updateColorPickr(session, \"id22\", action = \"enable\")   })   observeEvent(input$disable, {     updateColorPickr(session, \"id22\", action = \"disable\")   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorSelectorInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Selector Input — colorSelectorInput","title":"Color Selector Input — colorSelectorInput","text":"Choose restrictive set colors.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorSelectorInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Selector Input — colorSelectorInput","text":"","code":"colorSelectorInput(   inputId,   label,   choices,   selected = NULL,   mode = c(\"radio\", \"checkbox\"),   display_label = FALSE,   ncol = 10 )  colorSelectorExample()  colorSelectorDrop(   inputId,   label,   choices,   selected = NULL,   display_label = FALSE,   ncol = 10,   circle = TRUE,   size = \"sm\",   up = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorSelectorInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Selector Input — colorSelectorInput","text":"inputId input slot used access value. label Display label control, NULL label. choices list colors, can list named list, see example. selected Default selected color, NULL first color mode = 'radio' none mode = 'checkbox' mode 'radio' one choice, 'checkbox' selecting multiple values. display_label Display list's names palette color. ncol choices list vector, go line n elements. circle Logical, use circle square button size Size button : default, lg, sm, xs. Logical. Display dropdown menu . width Width dropdown menu content.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorSelectorInput.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Color Selector Input — colorSelectorInput","text":"colorSelectorExample(): Examples use colorSelectorInput colorSelectorDrop(): Display colorSelector dropdown button","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/colorSelectorInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Selector Input — colorSelectorInput","text":"","code":"if (interactive()) {  # Full example colorSelectorExample()  # Simple example ui <- fluidPage(   colorSelectorInput(     inputId = \"mycolor1\", label = \"Pick a color :\",     choices = c(\"steelblue\", \"cornflowerblue\",                 \"firebrick\", \"palegoldenrod\",                 \"forestgreen\")   ),   verbatimTextOutput(\"result1\") )  server <- function(input, output, session) {   output$result1 <- renderPrint({     input$mycolor1   }) }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/create_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create choice structure for treeInput() — create_tree","title":"Create choice structure for treeInput() — create_tree","text":"Create choice structure treeInput()","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/create_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create choice structure for treeInput() — create_tree","text":"","code":"create_tree(data, levels = names(data), levels_id = NULL, ...)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/create_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create choice structure for treeInput() — create_tree","text":"data data.frame. levels Variables identifying hierarchical levels, values variables used text displayed. levels_id Variable use ID nodes. Careful! Spaces allowed IDs. ... Addtional arguments.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/create_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create choice structure for treeInput() — create_tree","text":"list can used treeInput().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoAirDatepicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Some examples on how to use airDatepickerInput — demoAirDatepicker","title":"Some examples on how to use airDatepickerInput — demoAirDatepicker","text":"examples use airDatepickerInput","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoAirDatepicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some examples on how to use airDatepickerInput — demoAirDatepicker","text":"","code":"demoAirDatepicker(example = \"datepicker\")"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoAirDatepicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some examples on how to use airDatepickerInput — demoAirDatepicker","text":"example Name example : \"datepicker\", \"timepicker\", \"months\", \"years\", \"update\".","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoAirDatepicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Some examples on how to use airDatepickerInput — demoAirDatepicker","text":"","code":"if (interactive()) {    demoAirDatepicker(\"datepicker\")  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNoUiSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Some examples on how to use noUiSliderInput — demoNoUiSlider","title":"Some examples on how to use noUiSliderInput — demoNoUiSlider","text":"examples use noUiSliderInput","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNoUiSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some examples on how to use noUiSliderInput — demoNoUiSlider","text":"","code":"demoNoUiSlider(example = \"color\")"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNoUiSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some examples on how to use noUiSliderInput — demoNoUiSlider","text":"example Name example : \"color\", \"update\", \"behaviour\", \"\", \"format\".","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNoUiSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Some examples on how to use noUiSliderInput — demoNoUiSlider","text":"","code":"if (interactive()) {    demoNoUiSlider(\"color\")  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNumericRange.html","id":null,"dir":"Reference","previous_headings":"","what":"An example showing how numericRangeInput works — demoNumericRange","title":"An example showing how numericRangeInput works — demoNumericRange","text":"example showing numericRangeInput works","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNumericRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example showing how numericRangeInput works — demoNumericRange","text":"","code":"demoNumericRange()"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoNumericRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example showing how numericRangeInput works — demoNumericRange","text":"","code":"if (interactive()) {    demoNumericRange()  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoVirtualSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo for virtualSelectInput() — demoVirtualSelect","title":"Demo for virtualSelectInput() — demoVirtualSelect","text":"Demo virtualSelectInput()","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoVirtualSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo for virtualSelectInput() — demoVirtualSelect","text":"","code":"demoVirtualSelect(   name = c(\"default\", \"update\", \"choices-format\", \"prepare-choices\") )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoVirtualSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demo for virtualSelectInput() — demoVirtualSelect","text":"name Name demo app launch.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoVirtualSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demo for virtualSelectInput() — demoVirtualSelect","text":"value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/demoVirtualSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo for virtualSelectInput() — demoVirtualSelect","text":"","code":"if (FALSE) {  # Default usage demoVirtualSelect(\"default\")  # Update widget from server demoVirtualSelect(\"update\")  # Differents ways of specifying choices demoVirtualSelect(\"choices-format\")  # Prepare choices from a data.frame demoVirtualSelect(\"prepare-choices\")  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function — deprecated","title":"Deprecated function — deprecated","text":"functions deprecated removed futur release shinyWidgets","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function — deprecated","text":"","code":"useShinydashboard()  useShinydashboardPlus()  useTablerDash()  useArgonDash()  useBs4Dash(...)  setShadow(id = NULL, class = NULL)  setSliderColor(color, sliderId)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function — deprecated","text":"... Deprecated arguments id, class Deprecated arguments color, sliderId Deprecated arguments","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/downloadBttn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a download actionBttn — downloadBttn","title":"Create a download actionBttn — downloadBttn","text":"Create download button actionBttn().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/downloadBttn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a download actionBttn — downloadBttn","text":"","code":"downloadBttn(   outputId,   label = \"Download\",   style = \"unite\",   color = \"primary\",   size = \"md\",   block = FALSE,   no_outline = TRUE,   icon = shiny::icon(\"download\") )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/downloadBttn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a download actionBttn — downloadBttn","text":"outputId name output slot shiny::downloadHandler() assigned . label contents button, usually text label. style Style button, choose simple, bordered, minimal, stretch, jelly, gradient, fill, material-circle, material-flat, pill, float, unite. color Color button : default, primary, warning, danger, success, royal. size Size button : xs,sm, md, lg. block Logical, full width button. no_outline Logical, show outline navigating keyboard/interact using mouse touch. icon optional icon appear button.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/downloadBttn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a download actionBttn — downloadBttn","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Download bttn\"),   downloadBttn(     outputId = \"downloadData\",     style = \"bordered\",     color = \"primary\"   ) )  server <- function(input, output, session) {    output$downloadData <- downloadHandler(     filename = function() {       paste('data-', Sys.Date(), '.csv', sep='')     },     content = function(con) {       write.csv(mtcars, con)     }   )  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/drop-menu-interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with Drop Menu — drop-menu-interaction","title":"Interact with Drop Menu — drop-menu-interaction","text":"Interact Drop Menu","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/drop-menu-interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with Drop Menu — drop-menu-interaction","text":"","code":"enableDropMenu(id, session = shiny::getDefaultReactiveDomain())  disableDropMenu(id, session = shiny::getDefaultReactiveDomain())  showDropMenu(id, session = shiny::getDefaultReactiveDomain())  hideDropMenu(id, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/drop-menu-interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with Drop Menu — drop-menu-interaction","text":"id Drop menu ID, tag's ID followed \"_dropmenu\". session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/drop-menu-interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interact with Drop Menu — drop-menu-interaction","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h2(\"Drop Menu interactions\"),     dropMenu(       actionButton(\"myid\", \"See what's inside\"),       \"Drop menu content\",       actionButton(\"hide\", \"Close menu\"),       position = \"right middle\"     ),     tags$br(),     tags$p(\"Is drop menu opened?\"),     verbatimTextOutput(\"isOpen\"),     actionButton(\"show\", \"show menu\"),     tags$br(),     tags$br(),     dropMenu(       actionButton(\"dontclose\", \"Only closeable from server\"),       \"Drop menu content\",       actionButton(\"close\", \"Close menu\"),       position = \"right middle\",       hideOnClick = FALSE     )   )    server <- function(input, output, session) {      output$isOpen <- renderPrint({       input$myid_dropmenu     })      observeEvent(input$show, {       showDropMenu(\"myid_dropmenu\")     })      observeEvent(input$hide, {       hideDropMenu(\"myid_dropmenu\")     })      observeEvent(input$close, {       hideDropMenu(\"dontclose_dropmenu\")     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenu.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Menu — dropMenu","title":"Drop Menu — dropMenu","text":"pop-menu hide inputs elements .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Menu — dropMenu","text":"","code":"dropMenu(   tag,   ...,   padding = \"5px\",   placement = c(\"bottom\", \"bottom-start\", \"bottom-end\", \"top\", \"top-start\", \"top-end\",     \"right\", \"right-start\", \"right-end\", \"left\", \"left-start\", \"left-end\"),   trigger = \"click\",   arrow = TRUE,   theme = c(\"light\", \"light-border\", \"material\", \"translucent\"),   hideOnClick = TRUE,   maxWidth = \"none\",   options = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Menu — dropMenu","text":"tag HTML tag attach menu. ... UI elements displayed menu. padding Amount padding apply. Can numeric (pixels) character (e.g. \"3em\"). placement Positions menu relative reference element (tag). trigger event(s) cause menu show. arrow Determines menu arrow. theme CSS theme use. hideOnClick Determines menu hide mousedown event fired outside (.e. clicking reference element body page). maxWidth Determines maximum width menu. options Additional options, see dropMenuOptions.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Menu — dropMenu","text":"UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Menu — dropMenu","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h3(\"drop example\"),      dropMenu(       actionButton(\"go0\", \"See what\"),       tags$div(         tags$h3(\"This is a dropdown\"),         tags$ul(           tags$li(\"You can use HTML inside\"),           tags$li(\"Maybe Shiny inputs\"),           tags$li(\"And maybe outputs\"),           tags$li(\"and should work in markdown\")         )       ),       theme = \"light-border\",       placement = \"right\",       arrow = FALSE     ),      tags$br(),       dropMenu(       actionButton(\"go\", \"See what\"),       tags$h3(\"Some inputs\"),       sliderInput(         \"obs\", \"Number of observations:\",         min = 0, max = 1000, value = 500       ),       selectInput(         \"variable\", \"Variable:\",         c(\"Cylinders\" = \"cyl\",           \"Transmission\" = \"am\",           \"Gears\" = \"gear\")       ),       pickerInput(         inputId = \"pckr\",         label = \"Select all option\",         choices = rownames(mtcars),         multiple = TRUE,         options = list(`actions-box` = TRUE)       ),       radioButtons(         \"dist\", \"Distribution type:\",         c(\"Normal\" = \"norm\",           \"Uniform\" = \"unif\",           \"Log-normal\" = \"lnorm\",           \"Exponential\" = \"exp\")       )     ),     verbatimTextOutput(\"slider\"),     verbatimTextOutput(\"select\"),     verbatimTextOutput(\"picker\"),     verbatimTextOutput(\"radio\")   )    server <- function(input, output, session) {      output$slider <- renderPrint(input$obs)     output$select <- renderPrint(input$variable)     output$picker <- renderPrint(input$pckr)     output$radio <- renderPrint(input$dist)    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenuOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop menu options — dropMenuOptions","title":"Drop menu options — dropMenuOptions","text":"options passed underlying JavaScript library powering dropMenu : tippy.js. See available options https://atomiks.github.io/tippyjs/-props/.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenuOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop menu options — dropMenuOptions","text":"","code":"dropMenuOptions(duration = c(275, 250), animation = \"fade\", flip = FALSE, ...)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenuOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop menu options — dropMenuOptions","text":"duration Duration CSS transition animation ms. animation type transition animation. flip Determines tippy flips placed within viewport best can enough space. ... Additional arguments.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropMenuOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop menu options — dropMenuOptions","text":"list options used dropMenu.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropdown — dropdown","title":"Dropdown — dropdown","text":"Create dropdown menu","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropdown — dropdown","text":"","code":"dropdown(   ...,   style = \"default\",   status = \"default\",   size = \"md\",   icon = NULL,   label = NULL,   tooltip = FALSE,   right = FALSE,   up = FALSE,   width = NULL,   animate = FALSE,   inputId = NULL,   block = FALSE,   no_outline = TRUE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropdown — dropdown","text":"... List tag displayed dropdown menu. style Style button, choose simple, bordered, minimal, stretch, jelly, gradient, fill, material-circle, material-flat, pill, float, unite. status Color button, see actionBttn(). size Size button : xs,sm, md, lg. icon optional icon appear button. label contents button, usually text label. tooltip Put tooltip button, can customize tooltip tooltipOptions(). right Logical. dropdown menu starts right. Logical. Display dropdown menu . width Width dropdown menu content. animate Add animation dropdown, can logical result animateOptions(). inputId Optional, id button, button act like actionButton, can use id toggle dropdown menu server-side. block Logical, full width button. no_outline Logical, show outline navigating keyboard/interact using mouse touch.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dropdown — dropdown","text":"function similar dropdownButton() use Bootstrap, can use pickerInput() . Moreover can add animations appearance / disappearance dropdown animate.css.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropdown — dropdown","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   tags$h2(\"pickerInput in dropdown\"),   br(),   dropdown(      tags$h3(\"List of Input\"),      pickerInput(inputId = 'xcol2',                 label = 'X Variable',                 choices = names(iris),                 options = list(`style` = \"btn-info\")),      pickerInput(inputId = 'ycol2',                 label = 'Y Variable',                 choices = names(iris),                 selected = names(iris)[[2]],                 options = list(`style` = \"btn-warning\")),      sliderInput(inputId = 'clusters2',                 label = 'Cluster count',                 value = 3,                 min = 1, max = 9),      style = \"unite\", icon = icon(\"gear\"),     status = \"danger\", width = \"300px\",     animate = animateOptions(       enter = animations$fading_entrances$fadeInLeftBig,       exit = animations$fading_exits$fadeOutRightBig     )   ),    plotOutput(outputId = 'plot2') )  server <- function(input, output, session) {    selectedData2 <- reactive({     iris[, c(input$xcol2, input$ycol2)]   })    clusters2 <- reactive({     kmeans(selectedData2(), input$clusters2)   })    output$plot2 <- renderPlot({     palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\",               \"#984EA3\", \"#FF7F00\", \"#FFFF33\",               \"#A65628\", \"#F781BF\", \"#999999\"))      par(mar = c(5.1, 4.1, 0, 1))     plot(selectedData2(),          col = clusters2()$cluster,          pch = 20, cex = 3)     points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)   })  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropdown Button — dropdownButton","title":"Dropdown Button — dropdownButton","text":"Create dropdown menu Bootstrap can put input elements.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropdown Button — dropdownButton","text":"","code":"dropdownButton(   ...,   circle = TRUE,   status = \"default\",   size = \"default\",   icon = NULL,   label = NULL,   tooltip = FALSE,   right = FALSE,   up = FALSE,   width = NULL,   margin = \"10px\",   inline = FALSE,   inputId = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropdown Button — dropdownButton","text":"... List tag displayed dropdown menu. circle Logical. Use circle button status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = 'myClass', buttons class btn-myClass. size Size button : default, lg, sm, xs. icon icon appear button. label Label appear button. circle = TRUE tooltip = TRUE, label used tooltip. tooltip Put tooltip button, can customize tooltip tooltipOptions. right Logical. dropdown menu starts right. Logical. Display dropdown menu . width Width dropdown menu content. margin Value dropdown margin-right margin-left menu content. inline use inline (span()) block container (div()) output. inputId Optional, id button, button act like actionButton, can use id toggle dropdown menu server-side toggleDropdownButton.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dropdown Button — dropdownButton","text":"possible know dropdown open closed server-side input$<inputId>_state.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dropdown Button — dropdownButton","text":"pickerInput work inside dropdownButton also dropdown nest . Instead use dropdown, similar features built differently works.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/dropdownButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropdown Button — dropdownButton","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   dropdownButton(     inputId = \"mydropdown\",     label = \"Controls\",     icon = icon(\"sliders\"),     status = \"primary\",     circle = FALSE,     sliderInput(       inputId = \"n\",       label = \"Number of observations\",       min = 10, max = 100, value = 30     ),     prettyToggle(       inputId = \"na\",       label_on = \"NAs keeped\",       label_off = \"NAs removed\",       icon_on = icon(\"check\"),       icon_off = icon(\"xmark\")     )   ),   tags$div(style = \"height: 140px;\"), # spacing   verbatimTextOutput(outputId = \"out\"),   verbatimTextOutput(outputId = \"state\") )  server <- function(input, output, session) {    output$out <- renderPrint({     cat(       \" # n\\n\", input$n, \"\\n\",       \"# na\\n\", input$na     )   })    output$state <- renderPrint({     cat(\"Open:\", input$mydropdown_state)   })  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/execute_safely.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute an expression safely in server — execute_safely","title":"Execute an expression safely in server — execute_safely","text":"Execute expression without generating error, instead display error user alert.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/execute_safely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute an expression safely in server — execute_safely","text":"","code":"execute_safely(   expr,   title = \"Error\",   message = \"An error occured, detail below:\",   include_error = TRUE,   error_return = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/execute_safely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute an expression safely in server — execute_safely","text":"expr Expression evaluate title Title display alert case error. message Message display title. include_error Include error message generated R. error_return Value return case error. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/execute_safely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute an expression safely in server — execute_safely","text":"Result expr error, otherwise value error_return (NULL default use req  reactive context).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/execute_safely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute an expression safely in server — execute_safely","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Execute code safely in server\"),   fileInput(     inputId = \"file\",     label = \"Try to import something else than a text file (Excel for example)\"   ),   verbatimTextOutput(outputId = \"file_value\") )  server <- function(input, output, session) {    options(warn = 2) # turns warnings into errors   onStop(function() {     options(warn = 0)   })    r <- reactive({     req(input$file)     execute_safely(       read.csv(input$file$datapath)     )   })    output$file_value <- renderPrint({     head(r())   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formaNumericInputUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a Formatted Numeric Input Widget — updateCurrencyInput","title":"Update a Formatted Numeric Input Widget — updateCurrencyInput","text":"Update Formatted Numeric Input Widget","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formaNumericInputUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a Formatted Numeric Input Widget — updateCurrencyInput","text":"","code":"updateCurrencyInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   format = NULL )  updateFormatNumericInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   format = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formaNumericInputUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a Formatted Numeric Input Widget — updateCurrencyInput","text":"session Standard shiny session. inputId id input object. label label set input object. value value set input object. format format change input object .","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formaNumericInputUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a Formatted Numeric Input Widget — updateCurrencyInput","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h2(\"Currency Input\"),      currencyInput(\"id1\", \"Euro:\", value = 1234, format = \"euro\", width = 200, align = \"right\"),     verbatimTextOutput(\"res1\"),     actionButton(\"bttn0\", \"Change Input to Euros\"),     actionButton(\"bttn1\", \"Change Input to Dollars\"),     actionButton(\"bttn2\", \"Change Input to Yen\")   )    server <- function(input, output, session) {      output$res1 <- renderPrint(input$id1)      observeEvent(input$bttn0, {       updateCurrencyInput(         session = session,         inputId = \"id1\",         label = \"Euro:\",         format = \"euro\"       )     })     observeEvent(input$bttn1, {       updateCurrencyInput(         session = session,         inputId = \"id1\",         label = \"Dollar:\",         format = \"dollar\"       )     })     observeEvent(input$bttn2, {       updateCurrencyInput(         session = session,         inputId = \"id1\",         label = \"Yen:\",         format = \"Japanese\"       )     })     }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Numeric Inputs — currencyInput","title":"Format Numeric Inputs — currencyInput","text":"Shiny widgets --type formatting currency numeric values. modifiable version see autonumericInput(). two functions exact thing named differently intuitive use (currency money, formatNumeric percentage ).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Numeric Inputs — currencyInput","text":"","code":"currencyInput(   inputId,   label,   value,   format = \"euro\",   width = NULL,   align = \"center\" )  formatNumericInput(   inputId,   label,   value,   format = \"commaDecimalCharDotSeparator\",   width = NULL,   align = \"center\" )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Numeric Inputs — currencyInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value (unformatted). format character string specifying currency format input.  See \"Details\" possible values. width width input box, eg. \"200px\" \"100%\". align alignment text inside input box, one \"center\", \"left\", \"right\". Defaults \"center\".","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Numeric Inputs — currencyInput","text":"currency input widget can added UI shiny app.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Numeric Inputs — currencyInput","text":"regards format, currently 41 sets predefined options can used, variations one another. common : \"French\" \"Spanish\" \"NorthAmerican\" \"British\" \"Swiss\" \"Japanese\" \"Chinese\" \"Brazilian\" \"Turkish\" \"euro\" (\"French\") \"dollar\" (\"NorthAmerican\") \"percentageEU2dec\" \"percentageUS2dec\" \"dotDecimalCharCommaSeparator\" \"commaDecimalCharDotSeparator\" see full list please visit section AutoNumeric Github Page.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format Numeric Inputs — currencyInput","text":"Bonneau, Alexandre. 2018. \"AutoNumeric.js javascript Package\". http://autonumeric.org.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/formatNumericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Numeric Inputs — currencyInput","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h2(\"Currency Input\"),      currencyInput(\"id1\", \"Euro:\", value = 1234, format = \"euro\", width = 200, align = \"right\"),     verbatimTextOutput(\"res1\"),      currencyInput(\"id2\", \"Dollar:\", value = 1234, format = \"dollar\", width = 200, align = \"right\"),     verbatimTextOutput(\"res2\"),      currencyInput(\"id3\", \"Yen:\", value = 1234, format = \"Japanese\", width = 200, align = \"right\"),     verbatimTextOutput(\"res3\"),      br(),     tags$h2(\"Formatted Numeric Input\"),      formatNumericInput(\"id4\", \"Numeric:\", value = 1234, width = 200),     verbatimTextOutput(\"res4\"),      formatNumericInput(\"id5\", \"Percent:\", value = 1234, width = 200, format = \"percentageEU2dec\"),     verbatimTextOutput(\"res5\")   )    server <- function(input, output, session) {     output$res1 <- renderPrint(input$id1)     output$res2 <- renderPrint(input$id2)     output$res3 <- renderPrint(input$id3)     output$res4 <- renderPrint(input$id4)     output$res5 <- renderPrint(input$id5)   }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/html-dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML dependencies — html-dependencies","title":"HTML dependencies — html-dependencies","text":"functions used internally load dependencies widgets. exported. ones needed package fresh.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/html-dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML dependencies — html-dependencies","text":"","code":"html_dependency_awesome()  html_dependency_bttn()  html_dependency_pretty()  html_dependency_bsswitch()  html_dependency_sweetalert2(   theme = c(\"sweetalert2\", \"minimal\", \"dark\", \"bootstrap-4\", \"material-ui\", \"bulma\",     \"borderless\") )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/html-dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML dependencies — html-dependencies","text":"theme SweetAlert theme use.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/html-dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTML dependencies — html-dependencies","text":"htmlDependency.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/html-dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML dependencies — html-dependencies","text":"","code":"# Use in UI or tags function  library(shiny) fluidPage(   html_dependency_awesome() ) #> <div class=\"container-fluid\"><\/div>"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/inputSweetAlert.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch an input text dialog — inputSweetAlert","title":"Launch an input text dialog — inputSweetAlert","text":"Launch popup text input","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/inputSweetAlert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch an input text dialog — inputSweetAlert","text":"","code":"inputSweetAlert(   session = getDefaultReactiveDomain(),   inputId,   title = NULL,   text = NULL,   type = NULL,   input = c(\"text\", \"password\", \"textarea\", \"radio\", \"checkbox\", \"select\", \"email\",     \"url\"),   inputOptions = NULL,   inputPlaceholder = NULL,   inputValidator = NULL,   btn_labels = \"Ok\",   btn_colors = NULL,   reset_input = TRUE,   ... )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/inputSweetAlert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch an input text dialog — inputSweetAlert","text":"session session object passed function given shinyServer. inputId input slot used access value. Shiny module, use logic inputs : use namespace UI, server. title Title pop-. text Text pop-. type Type pop-: \"info\", \"success\", \"warning\", \"error\" \"question\". input Type input, possible values : \"text\", \"password\",\"textarea\", \"radio\", \"checkbox\" \"select\". inputOptions Options input. \"radio\" \"select\" choices. inputPlaceholder Placeholder input, use \"text\" \"checkbox\". inputValidator JavaScript function validate input. Must character wrapped (). btn_labels Label(s) button(s). btn_colors Color(s) button(s). reset_input Set input value NULL alert displayed. ... arguments passed JavaScript method.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/inputSweetAlert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Launch an input text dialog — inputSweetAlert","text":"function use JavaScript sweetalert2 library, see official documentation https://sweetalert2.github.io/.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/inputSweetAlert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch an input text dialog — inputSweetAlert","text":"","code":"# Input in alert ----  library(shiny) library(shinyWidgets)   ui <- fluidPage(   tags$h1(\"Input sweet alert\"),    actionButton(\"btn_text\", \"Text Input\"),   verbatimTextOutput(outputId = \"text\"),    actionButton(\"btn_password\", \"Password Input\"),   verbatimTextOutput(outputId = \"password\"),    actionButton(\"btn_radio\", \"Radio Input\"),   verbatimTextOutput(outputId = \"radio\"),    actionButton(\"btn_checkbox\", \"Checkbox Input\"),   verbatimTextOutput(outputId = \"checkbox\"),    actionButton(\"btn_select\", \"Select Input\"),   verbatimTextOutput(outputId = \"select\"),    actionButton(\"btn_email\", \"Email Input\"),   verbatimTextOutput(outputId = \"email\") ) server <- function(input, output, session) {     observeEvent(input$btn_text, {     inputSweetAlert(       session = session,       \"mytext\",       input = \"text\",       title = \"What's your name ?\",       inputPlaceholder = \"e.g.: Victor\",       allowOutsideClick = FALSE,       showCloseButton = TRUE     )   })   output$text <- renderPrint(input$mytext)     observeEvent(input$btn_password, {     inputSweetAlert(       session = session,       \"mypassword\",       input = \"password\",       title = \"What's your password ?\"     )   })   output$password <- renderPrint(input$mypassword)     observeEvent(input$btn_radio, {     inputSweetAlert(       session = session,       \"myradio\",       input = \"radio\",       inputOptions = c(\"Banana\" , \"Orange\", \"Apple\"),       title = \"What's your favorite fruit ?\",       inputValidator = I(         \"function(value) {           if (!value) {             return 'You need to choose something!';           }         }\"       )     )   })   output$radio <- renderPrint(input$myradio)     observeEvent(input$btn_checkbox, {     inputSweetAlert(       session = session,       \"mycheckbox\",       input = \"checkbox\",       inputPlaceholder = \"Yes I agree\",       title = \"Do you agree ?\"     )   })   output$checkbox <- renderPrint(input$mycheckbox)     observeEvent(input$btn_select, {     inputSweetAlert(       session = session,       \"myselect\",       input = \"select\",       inputOptions = c(\"Banana\" , \"Orange\", \"Apple\"),       title = \"What's your favorite fruit ?\"     )   })   output$select <- renderPrint(input$myselect)    observeEvent(input$btn_email, {     inputSweetAlert(       session = session,       inputId = \"myemail\",       input = \"email\",       title = \"What's your email ?\",       validationMessage= \"this does not look like a valid email!\"     )   })   output$email <- renderPrint(input$myemail)  }  if (interactive())   shinyApp(ui = ui, server = server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/knobInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Knob Input — knobInput","title":"Knob Input — knobInput","text":"Knob Input","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/knobInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knob Input — knobInput","text":"","code":"knobInput(   inputId,   label,   value,   min = 0,   max = 100,   step = 1,   angleOffset = 0,   angleArc = 360,   cursor = FALSE,   thickness = NULL,   lineCap = c(\"default\", \"round\"),   displayInput = TRUE,   displayPrevious = FALSE,   rotation = c(\"clockwise\", \"anticlockwise\"),   fgColor = NULL,   inputColor = NULL,   bgColor = NULL,   pre = NULL,   post = NULL,   fontSize = NULL,   readOnly = FALSE,   skin = NULL,   width = NULL,   height = NULL,   immediate = TRUE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/knobInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knob Input — knobInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. min Minimum allowed value, default 0. max Maximum allowed value, default 100. step Specifies interval selectable value, default 1. angleOffset Starting angle degrees, default 0. angleArc Arc size degrees, default 360. cursor Display mode \"cursor\", work properly width set pixel, (TRUE FALSE). thickness Gauge thickness, numeric value. lineCap Gauge stroke endings, 'default' 'round'. displayInput Hide input middle knob (TRUE FALSE). displayPrevious Display previous value transparency (TRUE FALSE). rotation Direction progression, 'clockwise' 'anticlockwise'. fgColor Foreground color. inputColor Input value (number) color. bgColor Background color. pre prefix string put front value. post suffix string put value. fontSize Font size, must valid CSS unit. readOnly Disable knob (TRUE FALSE). skin Change Knob skin, one option available : 'tron'. width, height width height input, e.g. 400px, 100%. value pixel recommended, otherwise knob able initialize case (hidden start example). immediate TRUE (default), server-side value updated time value change, FALSE value updated user release widget.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/knobInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Knob Input — knobInput","text":"Numeric value server-side.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/knobInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Knob Input — knobInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   knobInput(     inputId = \"myKnob\",     label = \"Display previous:\",     value = 50,     min = -100,     displayPrevious = TRUE,     fgColor = \"#428BCA\",     inputColor = \"#428BCA\"   ),   verbatimTextOutput(outputId = \"res\") )  server <- function(input, output, session) {    output$res <- renderPrint(input$myKnob)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/materialSwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Material Design Switch Input Control — materialSwitch","title":"Material Design Switch Input Control — materialSwitch","text":"toggle switch turn selection .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/materialSwitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Material Design Switch Input Control — materialSwitch","text":"","code":"materialSwitch(   inputId,   label = NULL,   value = FALSE,   status = \"default\",   right = FALSE,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/materialSwitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Material Design Switch Input Control — materialSwitch","text":"inputId input slot used access value. label Input label. value TRUE FALSE. status Color, must valid Bootstrap status : default, primary, info, success, warning, danger. right label right? default FALSE. inline Display input inline, want place buttons next . width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/materialSwitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Material Design Switch Input Control — materialSwitch","text":"switch control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/materialSwitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Material Design Switch Input Control — materialSwitch","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h3(\"Material switch examples\"),      materialSwitch(inputId = \"switch1\", label = \"Night mode\"),     verbatimTextOutput(\"value1\"),      materialSwitch(inputId = \"switch2\", label = \"Night mode\", status = \"danger\"),     verbatimTextOutput(\"value2\")   )   server <- function(input, output) {      output$value1 <- renderText({ input$switch1 })      output$value2 <- renderText({ input$switch2 })    }   shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multiselect input control — multiInput","title":"Create a multiselect input control — multiInput","text":"user-friendly replacement select boxes multiple attribute","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multiselect input control — multiInput","text":"","code":"multiInput(   inputId,   label,   choices = NULL,   selected = NULL,   options = NULL,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multiselect input control — multiInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . selected initially selected value. options List options passed multi (enable_search = FALSE disabling search bar example). width width input, e.g. 400px, 100%. choiceNames List names display user. choiceValues List values corresponding choiceNames.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multiselect input control — multiInput","text":"multiselect control can added UI shiny app.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a multiselect input control — multiInput","text":"Fabian Lindfors, \"user-friendly replacement select boxes multiple attribute enabled\", https://github.com/fabianlindfors/multi.js.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/multiInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a multiselect input control — multiInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")   # simple use  ui <- fluidPage(   multiInput(     inputId = \"id\", label = \"Fruits :\",     choices = c(\"Banana\", \"Blueberry\", \"Cherry\",                 \"Coconut\", \"Grapefruit\", \"Kiwi\",                 \"Lemon\", \"Lime\", \"Mango\", \"Orange\",                 \"Papaya\"),     selected = \"Banana\", width = \"350px\"   ),   verbatimTextOutput(outputId = \"res\") )  server <- function(input, output, session) {   output$res <- renderPrint({     input$id   }) }  shinyApp(ui = ui, server = server)   # with options  ui <- fluidPage(   multiInput(     inputId = \"id\", label = \"Fruits :\",     choices = c(\"Banana\", \"Blueberry\", \"Cherry\",                 \"Coconut\", \"Grapefruit\", \"Kiwi\",                 \"Lemon\", \"Lime\", \"Mango\", \"Orange\",                 \"Papaya\"),     selected = \"Banana\", width = \"400px\",     options = list(       enable_search = FALSE,       non_selected_header = \"Choose between:\",       selected_header = \"You have selected:\"     )   ),   verbatimTextOutput(outputId = \"res\") )  server <- function(input, output, session) {   output$res <- renderPrint({     input$id   }) }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric range slider — noUiSliderInput","title":"Numeric range slider — noUiSliderInput","text":"minimal numeric range slider lot features.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric range slider — noUiSliderInput","text":"","code":"noUiSliderInput(   inputId,   label = NULL,   min,   max,   value,   step = NULL,   tooltips = TRUE,   connect = TRUE,   padding = 0,   margin = NULL,   limit = NULL,   orientation = c(\"horizontal\", \"vertical\"),   direction = c(\"ltr\", \"rtl\"),   behaviour = \"tap\",   range = NULL,   pips = NULL,   format = wNumbFormat(),   update_on = c(\"end\", \"change\"),   color = NULL,   inline = FALSE,   width = NULL,   height = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric range slider — noUiSliderInput","text":"inputId input slot used access value. label Display label control, NULL label. min Minimal value can selected. max Maximal value can selected. value initial value slider. many cursors created values provided. step numeric, default, slider slides fluently. order make handles jump intervals, can use step option. tooltips logical, display slider's value tooltip slider. connect logical, vector length value + 1, color slider handle(s). padding numeric, padding limits close slider edges handles can . margin numeric, using two handles, minimum distance handles can set using margin option. limit numeric, limit option opposite margin option, limiting maximum distance two handles. orientation orientation setting can used set slider \"vertical\" \"horizontal\". direction \"ltr\" \"rtl\", default sliders top--bottom left--right, can change using direction option, decides upper side slider . behaviour Option handle user interaction, value several \"drag\", \"tap\", \"fixed\", \"snap\" \"none\". See https://refreshless.com/nouislider/behaviour-option/ examples. range list, can used define non-linear sliders. pips list, used generate points along slider. format numbers format, see wNumbFormat. update_on send value server: \"end\" (slider released) \"update\" (time value changes). color color Hex format slider. inline TRUE, possible position sliders side--side. width width input, e.g. 400px, 100%. height height input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric range slider — noUiSliderInput","text":"ui definition","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Numeric range slider — noUiSliderInput","text":"See updateNoUiSliderInput() updating slider value server-side. demoNoUiSlider() examples.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/noUiSliderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric range slider — noUiSliderInput","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"noUiSliderInput example\"),    noUiSliderInput(     inputId = \"noui1\",     min = 0, max = 100,     value = 20   ),   verbatimTextOutput(outputId = \"res1\"),    tags$br(),    noUiSliderInput(     inputId = \"noui2\", label = \"Slider vertical:\",     min = 0, max = 1000, step = 50,     value = c(100, 400), margin = 100,     orientation = \"vertical\",     width = \"100px\", height = \"300px\"   ),   verbatimTextOutput(outputId = \"res2\") )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$noui1)   output$res2 <- renderPrint(input$noui2)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericInputIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a numeric input control with icon(s) — numericInputIcon","title":"Create a numeric input control with icon(s) — numericInputIcon","text":"Extend form controls adding text icons , , sides classic numericInput.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericInputIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a numeric input control with icon(s) — numericInputIcon","text":"","code":"numericInputIcon(   inputId,   label,   value,   min = NULL,   max = NULL,   step = NULL,   icon = NULL,   size = NULL,   help_text = NULL,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericInputIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a numeric input control with icon(s) — numericInputIcon","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. min Minimum allowed value max Maximum allowed value step Interval use stepping min max icon shiny::icon() (equivalent) list, containing icons text, displayed right left text input. size Size input, default NULL, can \"sm\" (small) \"lg\" (large). help_text Help text placed widget displayed value entered user outside min max. width width input, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericInputIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a numeric input control with icon(s) — numericInputIcon","text":"numeric input control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericInputIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a numeric input control with icon(s) — numericInputIcon","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   # Test with different version of Bootstrap   # theme = bslib::bs_theme(version = 5),    tags$h2(\"numericInputIcon examples\"),   fluidRow(     column(       width = 6,       numericInputIcon(         inputId = \"ex1\",         label = \"With an icon\",         value = 10,         icon = icon(\"percent\")       ),       verbatimTextOutput(\"res1\"),       numericInputIcon(         inputId = \"ex2\",         label = \"With an icon (right)\",         value = 90,         step = 10,         icon = list(NULL, icon(\"percent\"))       ),       verbatimTextOutput(\"res2\"),       numericInputIcon(         inputId = \"ex3\",         label = \"With text\",         value = 50,         icon = list(\"km/h\")       ),       verbatimTextOutput(\"res3\"),       numericInputIcon(         inputId = \"ex4\",         label = \"Both side\",         value = 10000,         icon = list(icon(\"dollar-sign\"), \".00\")       ),       verbatimTextOutput(\"res4\"),       numericInputIcon(         inputId = \"ex5\",         label = \"Sizing\",         value = 10000,         icon = list(icon(\"dollar-sign\"), \".00\"),         size = \"lg\"       ),       verbatimTextOutput(\"res5\")     )   ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$ex1)   output$res2 <- renderPrint(input$ex2)   output$res3 <- renderPrint(input$ex3)   output$res4 <- renderPrint(input$ex4)   output$res5 <- renderPrint(input$ex5)  }   if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericRangeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric Range Input — numericRangeInput","title":"Numeric Range Input — numericRangeInput","text":"Create input group numeric inputs function range input.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericRangeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric Range Input — numericRangeInput","text":"","code":"numericRangeInput(   inputId,   label,   value,   width = NULL,   separator = \" to \",   min = NA,   max = NA,   step = NA )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericRangeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric Range Input — numericRangeInput","text":"inputId input slot used access value. label Display label control, NULL label. value initial value(s) range. numeric vector length one duplicated represent minimum maximum range; numeric vector two minimum maximum set minimum maximum range. width width input, e.g. '400px', '100%'; see validateCssUnit(). separator String display start end input boxes. min Minimum allowed value max Maximum allowed value step Interval use stepping min max","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/numericRangeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric Range Input — numericRangeInput","text":"","code":"if (interactive()) {  ### examples ----  # see ?demoNumericRange demoNumericRange()   ###  basic usage ----  library( shiny ) library( shinyWidgets )   ui <- fluidPage(    tags$br(),    numericRangeInput(     inputId = \"my_id\", label = \"Numeric Range Input:\",     value = c(100, 400)   ),   verbatimTextOutput(outputId = \"res1\")  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$my_id)  }  shinyApp(ui, server)   }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerGroup-module.html","id":null,"dir":"Reference","previous_headings":"","what":"Picker Group — pickerGroup-module","title":"Picker Group — pickerGroup-module","text":"Group mutually dependent pickerInput filtering data.frame's columns.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerGroup-module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Picker Group — pickerGroup-module","text":"","code":"pickerGroupUI(   id,   params,   label = NULL,   btn_label = \"Reset filters\",   options = list(),   inline = TRUE )  pickerGroupServer(input, output, session, data, vars)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerGroup-module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Picker Group — pickerGroup-module","text":"id Module's id. params named list parameters passed pickerInput, can use : inputId (obligatory, must variable name), label, placeholder. label Character, global label top labels. btn_label Character, reset button label. options See pickerInput options argument. inline TRUE (default), pickerInputs horizontally positioned, otherwise vertically. input standard shiny input. output standard shiny output. session standard shiny session. data data.frame, object can coerced data.frame. vars character, columns use create filters, must correspond variables listed params.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerGroup-module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Picker Group — pickerGroup-module","text":"reactive function containing data filtered.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerGroup-module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Picker Group — pickerGroup-module","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)   data(\"mpg\", package = \"ggplot2\")   ui <- fluidPage(   fluidRow(     column(       width = 10, offset = 1,       tags$h3(\"Filter data with picker group\"),       panel(         pickerGroupUI(           id = \"my-filters\",           params = list(             manufacturer = list(inputId = \"manufacturer\", label = \"Manufacturer:\"),             model = list(inputId = \"model\", label = \"Model:\"),             trans = list(inputId = \"trans\", label = \"Trans:\"),             class = list(inputId = \"class\", label = \"Class:\")           )         ), status = \"primary\"       ),       DT::dataTableOutput(outputId = \"table\")     )   ) )  server <- function(input, output, session) {   res_mod <- callModule(     module = pickerGroupServer,     id = \"my-filters\",     data = mpg,     vars = c(\"manufacturer\", \"model\", \"trans\", \"class\")   )   output$table <- DT::renderDataTable(res_mod()) }  shinyApp(ui, server)  }   ### Not inline example  if (interactive()) {    library(shiny)   library(shinyWidgets)     data(\"mpg\", package = \"ggplot2\")     ui <- fluidPage(     fluidRow(       column(         width = 4,         tags$h3(\"Filter data with picker group\"),         pickerGroupUI(           id = \"my-filters\",           inline = FALSE,           params = list(             manufacturer = list(inputId = \"manufacturer\", label = \"Manufacturer:\"),             model = list(inputId = \"model\", label = \"Model:\"),             trans = list(inputId = \"trans\", label = \"Trans:\"),             class = list(inputId = \"class\", label = \"Class:\")           )         )       ),       column(         width = 8,         DT::dataTableOutput(outputId = \"table\")       )     )   )    server <- function(input, output, session) {     res_mod <- callModule(       module = pickerGroupServer,       id = \"my-filters\",       data = mpg,       vars = c(\"manufacturer\", \"model\", \"trans\", \"class\")     )     output$table <- DT::renderDataTable(res_mod())   }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Picker Input Control — pickerInput","title":"Select Picker Input Control — pickerInput","text":"alternative selectInput plenty options customize .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Picker Input Control — pickerInput","text":"","code":"pickerInput(   inputId,   label = NULL,   choices,   selected = NULL,   multiple = FALSE,   options = list(),   choicesOpt = NULL,   width = NULL,   inline = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Picker Input Control — pickerInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . elements list named name rather value displayed user. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. multiple selection multiple items allowed? options List options, see pickerOptions available options. limit number selection possible, see example . choicesOpt Options choices dropdown menu. width width input : 'auto', 'fit', '100px', '75%'. inline Display picker inline, label menu line use width = \"fit\".","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Picker Input Control — pickerInput","text":"select control can added UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select Picker Input Control — pickerInput","text":"State picker (open close) accessible server-side input value: input$<inputId>_open, can TRUE (opened) FALSE (closed).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select Picker Input Control — pickerInput","text":"SnapAppointments contributors. \"jQuery plugin brings select elements 21st century intuitive multiselection, searching, much . Now Bootstrap 4 support\". https://github.com/snapappointments/bootstrap-select/","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Picker Input Control — pickerInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # You can run the gallery to see other examples shinyWidgetsGallery()   # Basic usage library(\"shiny\") library(shinyWidgets)  ui <- fluidPage(   pickerInput(     inputId = \"somevalue\",     label = \"A label\",     choices = c(\"a\", \"b\")   ),   verbatimTextOutput(\"value\") )  server <- function(input, output) {   output$value <- renderPrint(input$somevalue) }  shinyApp(ui, server)  }  ### Add actions box for selecting ---- ### deselecting all options  if (interactive()) {    library(shiny)   library(shinyWidgets)    ui <- fluidPage(     tags$h2(\"Select / Deselect all\"),     pickerInput(       inputId = \"p1\",       label = \"Select all option\",       choices = rownames(mtcars),       multiple = TRUE,       options = list(`actions-box` = TRUE)     ),     verbatimTextOutput(\"r1\"),     br(),     pickerInput(       inputId = \"p2\",       label = \"Select all option / custom text\",       choices = rownames(mtcars),       multiple = TRUE,       options = list(         `actions-box` = TRUE,         `deselect-all-text` = \"None...\",         `select-all-text` = \"Yeah, all !\",         `none-selected-text` = \"zero\"       )     ),     verbatimTextOutput(\"r2\")   )    server <- function(input, output, session) {      output$r1 <- renderPrint(input$p1)     output$r2 <- renderPrint(input$p2)    }    shinyApp(ui = ui, server = server)  }  ### Customize the values displayed in the box ----  if (interactive()) {    library(shiny)   library(shinyWidgets)    ui <- fluidPage(     br(),     pickerInput(       inputId = \"p1\",       label = \"Default\",       multiple = TRUE,       choices = rownames(mtcars),       selected = rownames(mtcars)[1:5]     ),     br(),     pickerInput(       inputId = \"p1b\",       label = \"Default with | separator\",       multiple = TRUE,       choices = rownames(mtcars),       selected = rownames(mtcars)[1:5],       options = list(`multiple-separator` = \" | \")     ),     br(),     pickerInput(       inputId = \"p2\",       label = \"Static\",       multiple = TRUE,       choices = rownames(mtcars),       selected = rownames(mtcars)[1:5],       options = list(`selected-text-format`= \"static\",                      title = \"Won't change\")     ),     br(),     pickerInput(       inputId = \"p3\",       label = \"Count\",       multiple = TRUE,       choices = rownames(mtcars),       selected = rownames(mtcars)[1:5],       options = list(`selected-text-format`= \"count\")     ),     br(),     pickerInput(       inputId = \"p3\",       label = \"Customize count\",       multiple = TRUE,       choices = rownames(mtcars),       selected = rownames(mtcars)[1:5],       options = list(         `selected-text-format`= \"count\",         `count-selected-text` = \"{0} models choosed (on a total of {1})\"       )     )   )    server <- function(input, output, session) {    }    shinyApp(ui = ui, server = server)  }  ### Limit the number of selections ----  if (interactive()) {    library(shiny)   library(shinyWidgets)    ui <- fluidPage(     pickerInput(       inputId = \"groups\",       label = \"Select one from each group below:\",       choices = list(         Group1 = c(\"1\", \"2\", \"3\", \"4\"),         Group2 = c(\"A\", \"B\", \"C\", \"D\")       ),       multiple = TRUE,       options =  list(\"max-options-group\" = 1)     ),     verbatimTextOutput(outputId = \"res_grp\"),     pickerInput(       inputId = \"groups_2\",       label = \"Select two from each group below:\",       choices = list(         Group1 = c(\"1\", \"2\", \"3\", \"4\"),         Group2 = c(\"A\", \"B\", \"C\", \"D\")       ),       multiple = TRUE,       options =  list(\"max-options-group\" = 2)     ),     verbatimTextOutput(outputId = \"res_grp_2\"),     pickerInput(       inputId = \"classic\",       label = \"Select max two option below:\",       choices = c(\"A\", \"B\", \"C\", \"D\"),       multiple = TRUE,       options =  list(         \"max-options\" = 2,         \"max-options-text\" = \"No more!\"       )     ),     verbatimTextOutput(outputId = \"res_classic\")   )    server <- function(input, output) {      output$res_grp <- renderPrint(input$groups)     output$res_grp_2 <- renderPrint(input$groups_2)     output$res_classic <- renderPrint(input$classic)    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for pickerInput — pickerOptions","title":"Options for pickerInput — pickerOptions","text":"Wrapper options available : https://developer.snapappointments.com/bootstrap-select/options/","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for pickerInput — pickerOptions","text":"","code":"pickerOptions(   actionsBox = NULL,   container = NULL,   countSelectedText = NULL,   deselectAllText = NULL,   dropdownAlignRight = NULL,   dropupAuto = NULL,   header = NULL,   hideDisabled = NULL,   iconBase = NULL,   liveSearch = NULL,   liveSearchNormalize = NULL,   liveSearchPlaceholder = NULL,   liveSearchStyle = NULL,   maxOptions = NULL,   maxOptionsText = NULL,   mobile = NULL,   multipleSeparator = NULL,   noneSelectedText = NULL,   noneResultsText = NULL,   selectAllText = NULL,   selectedTextFormat = NULL,   selectOnTab = NULL,   showContent = NULL,   showIcon = NULL,   showSubtext = NULL,   showTick = NULL,   size = NULL,   style = NULL,   tickIcon = NULL,   title = NULL,   virtualScroll = NULL,   width = NULL,   windowPadding = NULL,   ... )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options for pickerInput — pickerOptions","text":"actionsBox set true, adds two buttons top dropdown menu (Select & Deselect ). Type: boolean; Default: false. container set string, appends select specific element selector, e.g., container: 'body' | '.main-body' Type: string | false; Default: false. countSelectedText Sets format text displayed selectedTextFormat count count > #. {0} selected amount. {1} total available selection. set function, first parameter number selected options, second total number options. function must return string. Type: string | function; Default: function. deselectAllText text button deselects options actionsBox enabled. Type: string; Default: 'Deselect '. dropdownAlignRight Align menu right instead left. set 'auto', menu automatically align right room menu's full width aligned left. Type: boolean | 'auto'; Default: false. dropupAuto checks see room, . dropup enough room fully open normally, room , dropup still opens normally. Otherwise, becomes dropup. dropupAuto set false, dropups must called manually. Type: boolean; Default: true. header adds header top menu; includes close button default Type: string; Default: false. hideDisabled removes disabled options optgroups menu data-hide-disabled: true Type: boolean; Default: false. iconBase Set base use different icon font instead Glyphicons. changing iconBase, might also want change tickIcon, case new icon font uses different naming scheme. Type: string; Default: 'glyphicon'. liveSearch set true, adds search box top selectpicker dropdown. Type: boolean; Default: false. liveSearchNormalize Setting liveSearchNormalize true allows accent-insensitive searching. Type: boolean; Default: false. liveSearchPlaceholder set string, placeholder attribute equal string added liveSearch input. Type: string; Default: null. liveSearchStyle set 'contains', searching reveal options contain searched text. example, searching pl return Apple, Plum, Plantain. set 'startsWith', searching pl return Plum Plantain. Type: string; Default: 'contains'. maxOptions set integer multi-select, number selected options exceed given value. option can also exist data-attribute <optgroup>, case applies <optgroup>. Type: integer | false; Default: false. maxOptionsText text displayed maxOptions enabled maximum number options given scenario selected. function used, must return array. array[0] text used maxOptions applied entire select element. array[1] text used maxOptions used optgroup. string used, text used element optgroup. Type: string | array | function; Default: function. mobile set true, enables device's native menu select menus. Type: boolean; Default: false. multipleSeparator Set character displayed button separates selected options. Type: string; Default: ', '. noneSelectedText text displayed multiple select selected options. Type: string; Default: 'Nothing selected'. noneResultsText text displayed search return results. Type: string; Default: 'results matched 0'. selectAllText text button selects options actionsBox enabled. Type: string; Default: 'Select '. selectedTextFormat Specifies selection displayed multiple select. 'values' displays list selected options (separated multipleSeparator. 'static' simply displays select element's title. 'count' displays total number selected options. 'count > x' behaves like 'values' number selected options greater x; , behaves like 'count'. Type: 'values' | 'static' | 'count' | 'count > x' (x integer); Default: 'values'. selectOnTab set true, treats tab character like enter space characters within selectpicker dropdown. Type: boolean; Default: false. showContent set true, display custom HTML associated selected option(s) button. set false, option value displayed instead. Type: boolean; Default: true. showIcon set true, display icon(s) associated selected option(s) button. Type: boolean; Default: true. showSubtext set true, display subtext associated selected option button. Type: boolean; Default: false. showTick Show checkmark selected option (items without multiple attribute). Type: boolean; Default: false. size set 'auto', menu always opens show many items window allow without cut . set integer, menu show given number items, even dropdown cut . set false, menu always show items. Type: 'auto' | integer | false; Default: 'auto'. style set string, add value button's style. Type: string | null; Default: null. tickIcon Set icon use display \"tick\" next selected options. Type: string; Default: 'glyphicon-ok'. title default title selectpicker. Type: string | null; Default: null. virtualScroll enabled, items dropdown rendered using virtualization (.e. items within viewport rendered). drastically improves performance selects large number options. Set integer use virtualization select least number options. Type: boolean | integer; Default: 600. width set auto, width selectpicker automatically adjusted accommodate widest option. set css-width, width selectpicker forced inline given value. set false, width information removed. Type: 'auto' | 'fit' | css-width | false (css-width CSS width units, e.g. 100px); Default: false. windowPadding useful cases window areas dropdown menu cover - instance fixed header. set integer, padding added sides. Alternatively, array integers can used format top, right, bottom, left. Type: integer | array; Default: 0. ... options listed .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerOptions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Options for pickerInput — pickerOptions","text":"Documentation Bootstrap-select onlin page.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/pickerOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options for pickerInput — pickerOptions","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     pickerInput(       inputId = \"month\",       label = \"Select a month\",       choices = month.name,       multiple = TRUE,       options = pickerOptions(         actionsBox = TRUE,         title = \"Please select a month\",         header = \"This is a title\"       )     )   )    server <- function(input, output, session) {    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prepare_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare choices for virtualSelectInput() — prepare_choices","title":"Prepare choices for virtualSelectInput() — prepare_choices","text":"Prepare choices virtualSelectInput()","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prepare_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare choices for virtualSelectInput() — prepare_choices","text":"","code":"prepare_choices(   .data,   label,   value,   group_by = NULL,   description = NULL,   alias = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prepare_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare choices for virtualSelectInput() — prepare_choices","text":".data object type data.frame(). label Variable use labels (displayed user). value Variable use values (retrieved server-side). group_by Variable identifying groups use option group feature. description Optional variable allowing show text labels. alias Optional variable containing text use search feature.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prepare_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare choices for virtualSelectInput() — prepare_choices","text":"list use choices argument virtualSelectInput().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prepare_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare choices for virtualSelectInput() — prepare_choices","text":"","code":"library(shiny) library(shinyWidgets)  state_data <- data.frame(   name = state.name,   abb = state.abb,   region = state.region,   division = state.division )  ui <- fluidPage(   tags$h2(\"Virtual Select: prepare choices\"),    virtualSelectInput(     inputId = \"sel1\",     label = \"Use a data.frame:\",     choices = prepare_choices(state_data, name, abb),     search = TRUE   ),   verbatimTextOutput(\"res1\"),    virtualSelectInput(     inputId = \"sel2\",     label = \"Group choices:\",     choices = prepare_choices(state_data, name, abb, region),     multiple = TRUE   ),   verbatimTextOutput(\"res2\"),    virtualSelectInput(     inputId = \"sel3\",     label = \"Add a description:\",     choices = prepare_choices(state_data, name, abb, description = division),     multiple = TRUE,     hasOptionDescription = TRUE   ),   verbatimTextOutput(\"res3\") )  server <- function(input, output, session) {   output$res1 <- renderPrint(input$sel1)   output$res2 <- renderPrint(input$sel2)   output$res3 <- renderPrint(input$sel3) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Checkbox Input — prettyCheckbox","title":"Pretty Checkbox Input — prettyCheckbox","text":"Create pretty checkbox can used specify logical values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Checkbox Input — prettyCheckbox","text":"","code":"prettyCheckbox(   inputId,   label,   value = FALSE,   status = \"default\",   shape = c(\"square\", \"curve\", \"round\"),   outline = FALSE,   fill = FALSE,   thick = FALSE,   animation = NULL,   icon = NULL,   plain = FALSE,   bigger = FALSE,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Checkbox Input — prettyCheckbox","text":"inputId input slot used access value. label Display label control. value Initial value (TRUE FALSE). status Add class checkbox, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. shape Shape checkbox square, curve round. outline Color also border checkbox (TRUE FALSE). fill Fill checkbox color (TRUE FALSE). thick Make content inside checkbox smaller (TRUE FALSE). animation Add animation checkbox checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon checkbox, must icon created icon. plain Remove border checkbox checked (TRUE FALSE). bigger Scale checkboxes bit bigger (TRUE FALSE). inline Display input inline, want place checkboxes next . width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Checkbox Input — prettyCheckbox","text":"TRUE FALSE server-side.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pretty Checkbox Input — prettyCheckbox","text":"Due nature different checkbox design, certain animations applicable arguments combinations. can find examples pretty-checkbox official page : https://lokesh-coder.github.io/pretty-checkbox/.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Checkbox Input — prettyCheckbox","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty checkbox\"),   br(),    fluidRow(     column(       width = 4,       prettyCheckbox(         inputId = \"checkbox1\",         label = \"Click me!\"       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       prettyCheckbox(         inputId = \"checkbox4\",         label = \"Click me!\",         outline = TRUE,         plain = TRUE,         icon = icon(\"thumbs-up\")       ),       verbatimTextOutput(outputId = \"res4\")     ),     column(       width = 4,       prettyCheckbox(         inputId = \"checkbox2\",         label = \"Click me!\",         thick = TRUE,         animation = \"pulse\",         status = \"info\"       ),       verbatimTextOutput(outputId = \"res2\"),       br(),       prettyCheckbox(         inputId = \"checkbox5\",         label = \"Click me!\",         icon = icon(\"check\"),         animation = \"tada\",         status = \"default\"       ),       verbatimTextOutput(outputId = \"res5\")     ),     column(       width = 4,       prettyCheckbox(         inputId = \"checkbox3\",         label = \"Click me!\",         shape = \"round\",         status = \"danger\",         fill = TRUE,         value = TRUE       ),       verbatimTextOutput(outputId = \"res3\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$checkbox1)   output$res2 <- renderPrint(input$checkbox2)   output$res3 <- renderPrint(input$checkbox3)   output$res4 <- renderPrint(input$checkbox4)   output$res5 <- renderPrint(input$checkbox5)  }  if (interactive())   shinyApp(ui, server)     # Inline example ----  ui <- fluidPage(   tags$h1(\"Pretty checkbox: inline example\"),   br(),   prettyCheckbox(     inputId = \"checkbox1\",     label = \"Click me!\",     status = \"success\",     outline = TRUE,     inline = TRUE   ),   prettyCheckbox(     inputId = \"checkbox2\",     label = \"Click me!\",     thick = TRUE,     shape = \"curve\",     animation = \"pulse\",     status = \"info\",     inline = TRUE   ),   prettyCheckbox(     inputId = \"checkbox3\",     label = \"Click me!\",     shape = \"round\",     status = \"danger\",     value = TRUE,     inline = TRUE   ),   prettyCheckbox(     inputId = \"checkbox4\",     label = \"Click me!\",     outline = TRUE,     plain = TRUE,     animation = \"rotate\",     icon = icon(\"thumbs-up\"),     inline = TRUE   ),   prettyCheckbox(     inputId = \"checkbox5\",     label = \"Click me!\",     icon = icon(\"check\"),     animation = \"tada\",     status = \"primary\",     inline = TRUE   ),   verbatimTextOutput(outputId = \"res\") )  server <- function(input, output, session) {    output$res <- renderPrint(     c(input$checkbox1,       input$checkbox2,       input$checkbox3,       input$checkbox4,       input$checkbox5)   )  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckboxGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","title":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","text":"Create group pretty checkboxes can used toggle multiple choices independently. server receive input character vector selected values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckboxGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","text":"","code":"prettyCheckboxGroup(   inputId,   label,   choices = NULL,   selected = NULL,   status = \"default\",   shape = c(\"square\", \"curve\", \"round\"),   outline = FALSE,   fill = FALSE,   thick = FALSE,   animation = NULL,   icon = NULL,   plain = FALSE,   bigger = FALSE,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckboxGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","text":"inputId input slot used access value. label Display label control. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . status Add class checkbox, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. shape Shape checkbox square, curve round. outline Color also border checkbox (TRUE FALSE). fill Fill checkbox color (TRUE FALSE). thick Make content inside checkbox smaller (TRUE FALSE). animation Add animation checkbox checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon checkbox, must icon created icon. plain Remove border checkbox checked (TRUE FALSE). bigger Scale checkboxes bit bigger (TRUE FALSE). inline TRUE, render choices inline (.e. horizontally). width width input, e.g. 400px, 100%. choiceNames List names display user. choiceValues List values corresponding choiceNames","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckboxGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","text":"character vector NULL server-side.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyCheckboxGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Checkbox Group Input Control — prettyCheckboxGroup","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty checkbox group\"),   br(),    fluidRow(     column(       width = 4,       prettyCheckboxGroup(         inputId = \"checkgroup1\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\")       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       prettyCheckboxGroup(         inputId = \"checkgroup4\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         outline = TRUE,         plain = TRUE,         icon = icon(\"thumbs-up\")       ),       verbatimTextOutput(outputId = \"res4\")     ),     column(       width = 4,       prettyCheckboxGroup(         inputId = \"checkgroup2\",         label = \"Click me!\",         thick = TRUE,         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         animation = \"pulse\",         status = \"info\"       ),       verbatimTextOutput(outputId = \"res2\"),       br(),       prettyCheckboxGroup(         inputId = \"checkgroup5\",         label = \"Click me!\",         icon = icon(\"check\"),         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         animation = \"tada\",         status = \"default\"       ),       verbatimTextOutput(outputId = \"res5\")     ),     column(       width = 4,       prettyCheckboxGroup(         inputId = \"checkgroup3\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         shape = \"round\",         status = \"danger\",         fill = TRUE,         inline = TRUE       ),       verbatimTextOutput(outputId = \"res3\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$checkgroup1)   output$res2 <- renderPrint(input$checkgroup2)   output$res3 <- renderPrint(input$checkgroup3)   output$res4 <- renderPrint(input$checkgroup4)   output$res5 <- renderPrint(input$checkgroup5)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyRadioButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty radio Buttons Input Control — prettyRadioButtons","title":"Pretty radio Buttons Input Control — prettyRadioButtons","text":"Create set radio buttons used select item list.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyRadioButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty radio Buttons Input Control — prettyRadioButtons","text":"","code":"prettyRadioButtons(   inputId,   label,   choices = NULL,   selected = NULL,   status = \"primary\",   shape = c(\"round\", \"square\", \"curve\"),   outline = FALSE,   fill = FALSE,   thick = FALSE,   animation = NULL,   icon = NULL,   plain = FALSE,   bigger = FALSE,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyRadioButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty radio Buttons Input Control — prettyRadioButtons","text":"inputId input slot used access value. label Display label control. choices List values show radio buttons . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, (specified defaults first value). status Add class radio, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. shape Shape radio square, curve round. outline Color also border radio (TRUE FALSE). fill Fill radio color (TRUE FALSE). thick Make content inside radio smaller (TRUE FALSE). animation Add animation radio checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon radio, must icon created icon. plain Remove border radio checked (TRUE FALSE). bigger Scale radio bit bigger (TRUE FALSE). inline TRUE, render choices inline (.e. horizontally). width width input, e.g. 400px, 100%. choiceNames List names display user. choiceValues List values corresponding choiceNames","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyRadioButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty radio Buttons Input Control — prettyRadioButtons","text":"character vector NULL server-side.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyRadioButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty radio Buttons Input Control — prettyRadioButtons","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty radio buttons\"),   br(),    fluidRow(     column(       width = 4,       prettyRadioButtons(         inputId = \"radio1\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\")       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       prettyRadioButtons(         inputId = \"radio4\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         outline = TRUE,         plain = TRUE,         icon = icon(\"thumbs-up\")       ),       verbatimTextOutput(outputId = \"res4\")     ),     column(       width = 4,       prettyRadioButtons(         inputId = \"radio2\",         label = \"Click me!\",         thick = TRUE,         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         animation = \"pulse\",         status = \"info\"       ),       verbatimTextOutput(outputId = \"res2\"),       br(),       prettyRadioButtons(         inputId = \"radio5\",         label = \"Click me!\",         icon = icon(\"check\"),         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         animation = \"tada\",         status = \"default\"       ),       verbatimTextOutput(outputId = \"res5\")     ),     column(       width = 4,       prettyRadioButtons(         inputId = \"radio3\",         label = \"Click me!\",         choices = c(\"Click me !\", \"Me !\", \"Or me !\"),         shape = \"round\",         status = \"danger\",         fill = TRUE,         inline = TRUE       ),       verbatimTextOutput(outputId = \"res3\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$radio1)   output$res2 <- renderPrint(input$radio2)   output$res3 <- renderPrint(input$radio3)   output$res4 <- renderPrint(input$radio4)   output$res5 <- renderPrint(input$radio5)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Switch Input — prettySwitch","title":"Pretty Switch Input — prettySwitch","text":"toggle switch replace checkbox","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Switch Input — prettySwitch","text":"","code":"prettySwitch(   inputId,   label,   value = FALSE,   status = \"default\",   slim = FALSE,   fill = FALSE,   bigger = FALSE,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Switch Input — prettySwitch","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value (TRUE FALSE). status Add class switch, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. slim Change style switch (TRUE FALSE), see examples. fill Change style switch (TRUE FALSE), see examples. bigger Scale switch bit bigger (TRUE FALSE). inline Display input inline, want place switch next . width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Switch Input — prettySwitch","text":"TRUE FALSE server-side.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pretty Switch Input — prettySwitch","text":"Appearance better browser Chrome RStudio Viewer","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettySwitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Switch Input — prettySwitch","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty switches\"),   br(),    fluidRow(     column(       width = 4,       prettySwitch(inputId = \"switch1\", label = \"Default:\"),       verbatimTextOutput(outputId = \"res1\"),       br(),       prettySwitch(         inputId = \"switch4\",         label = \"Fill switch with status:\",         fill = TRUE, status = \"primary\"       ),       verbatimTextOutput(outputId = \"res4\")     ),     column(       width = 4,       prettySwitch(         inputId = \"switch2\",         label = \"Danger status:\",         status = \"danger\"       ),       verbatimTextOutput(outputId = \"res2\")     ),     column(       width = 4,       prettySwitch(         inputId = \"switch3\",         label = \"Slim switch:\",         slim = TRUE       ),       verbatimTextOutput(outputId = \"res3\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$switch1)   output$res2 <- renderPrint(input$switch2)   output$res3 <- renderPrint(input$switch3)   output$res4 <- renderPrint(input$switch4)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyToggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Toggle Input — prettyToggle","title":"Pretty Toggle Input — prettyToggle","text":"single checkbox changes appearance checked .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyToggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Toggle Input — prettyToggle","text":"","code":"prettyToggle(   inputId,   label_on,   label_off,   icon_on = NULL,   icon_off = NULL,   value = FALSE,   status_on = \"success\",   status_off = \"danger\",   shape = c(\"square\", \"curve\", \"round\"),   outline = FALSE,   fill = FALSE,   thick = FALSE,   plain = FALSE,   bigger = FALSE,   animation = NULL,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyToggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Toggle Input — prettyToggle","text":"inputId input slot used access value. label_on Display label control value TRUE. label_off Display label control value FALSE icon_on Optional, display icon checkbox value TRUE, must icon created icon. icon_off Optional, display icon checkbox value FALSE, must icon created icon. value Initial value (TRUE FALSE). status_on Add class checkbox value TRUE, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. status_off Add class checkbox value FALSE, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. shape Shape checkbox square, curve round. outline Color also border checkbox (TRUE FALSE). fill Fill checkbox color (TRUE FALSE). thick Make content inside checkbox smaller (TRUE FALSE). plain Remove border checkbox checked (TRUE FALSE). bigger Scale checkboxes bit bigger (TRUE FALSE). animation Add animation checkbox checked, value smooth, jelly, tada, rotate, pulse. inline Display input inline, want place checkboxes next . width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyToggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Toggle Input — prettyToggle","text":"TRUE FALSE server-side.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/prettyToggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Toggle Input — prettyToggle","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty toggles\"),   br(),    fluidRow(     column(       width = 4,       prettyToggle(         inputId = \"toggle1\",         label_on = \"Checked!\",         label_off = \"Unchecked...\"       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       prettyToggle(         inputId = \"toggle4\",  label_on = \"Yes!\",         label_off = \"No..\", outline = TRUE,         plain = TRUE,         icon_on = icon(\"thumbs-up\"),         icon_off = icon(\"thumbs-down\")       ),       verbatimTextOutput(outputId = \"res4\")     ),     column(       width = 4,       prettyToggle(         inputId = \"toggle2\",         label_on = \"Yes!\", icon_on = icon(\"check\"),         status_on = \"info\", status_off = \"warning\",         label_off = \"No..\", icon_off = icon(\"xmark\")       ),       verbatimTextOutput(outputId = \"res2\")     ),     column(       width = 4,       prettyToggle(         inputId = \"toggle3\",  label_on = \"Yes!\",         label_off = \"No..\", shape = \"round\",         fill = TRUE, value = TRUE       ),       verbatimTextOutput(outputId = \"res3\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$toggle1)   output$res2 <- renderPrint(input$toggle2)   output$res3 <- renderPrint(input$toggle3)   output$res4 <- renderPrint(input$toggle4)  }  if (interactive())   shinyApp(ui, server)     # Inline example ----  ui <- fluidPage(   tags$h1(\"Pretty toggles: inline example\"),   br(),    prettyToggle(     inputId = \"toggle1\",     label_on = \"Checked!\",     label_off = \"Unchecked...\",     inline = TRUE   ),   prettyToggle(     inputId = \"toggle2\",     label_on = \"Yep\",     status_on = \"default\",     icon_on = icon(\"ok-circle\", lib = \"glyphicon\"),     label_off = \"Nope\",     status_off = \"default\",     icon_off = icon(\"remove-circle\", lib = \"glyphicon\"),     plain = TRUE,     inline = TRUE   ),   prettyToggle(     inputId = \"toggle3\",     label_on = \"\",     label_off = \"\",     icon_on = icon(\"volume-high\", lib = \"glyphicon\"),     icon_off = icon(\"volume-off\", lib = \"glyphicon\"),     status_on = \"primary\",     status_off = \"default\",     plain = TRUE,     outline = TRUE,     bigger = TRUE,     inline = TRUE   ),   prettyToggle(     inputId = \"toggle4\",     label_on = \"Yes!\",     label_off = \"No..\",     outline = TRUE,     plain = TRUE,     icon_on = icon(\"thumbs-up\"),     icon_off = icon(\"thumbs-down\"),     inline = TRUE   ),    verbatimTextOutput(outputId = \"res\")  )  server <- function(input, output, session) {    output$res <- renderPrint(     c(input$toggle1,       input$toggle2,       input$toggle3,       input$toggle4)   )  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progress-bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress Bars — progress-bar","title":"Progress Bars — progress-bar","text":"Create progress bar provide feedback calculation.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progress-bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Bars — progress-bar","text":"","code":"progressBar(   id,   value,   total = NULL,   display_pct = FALSE,   size = NULL,   status = NULL,   striped = FALSE,   title = NULL,   range_value = NULL,   commas = TRUE,   unit_mark = \"%\" )  updateProgressBar(   session = getDefaultReactiveDomain(),   id,   value,   total = NULL,   title = NULL,   status = NULL,   range_value = NULL,   commas = TRUE,   unit_mark = \"%\" )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progress-bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progress Bars — progress-bar","text":"id id used update progress bar. Shiny module, use logic inputs : use namespace UI, server. value Value progress bar 0 100, >100 must provide total. total Used calculate percentage value > 100, force indicator appear top right progress bar. display_pct logical, display percentage progress bar. size Size, NULL default value 'xxs', 'xs', 'sm', work package shinydashboard. status Color, must valid Bootstrap status : primary, info, success, warning, danger. striped logical, add striped effect. title character, optional title. range_value Default display percentage ([0, 100]), can specify custom range, e.g. -50, 50. commas logical, add commas total value. unit_mark Unit value displayed progress bar, default \"%\". session 'session' object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progress-bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Progress Bars — progress-bar","text":"progress bar can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progress-bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress Bars — progress-bar","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   column(     width = 7,     tags$b(\"Default\"), br(),     progressBar(id = \"pb1\", value = 50),     sliderInput(       inputId = \"up1\",       label = \"Update\",       min = 0,       max = 100,       value = 50     ),     br(),     tags$b(\"Other options\"), br(),     progressBar(       id = \"pb2\",       value = 0,       total = 100,       title = \"\",       display_pct = TRUE     ),     actionButton(       inputId = \"go\",       label = \"Launch calculation\"     )   ) )  server <- function(input, output, session) {   observeEvent(input$up1, {     updateProgressBar(       session = session,       id = \"pb1\",       value = input$up1     )   })   observeEvent(input$go, {     for (i in 1:100) {       updateProgressBar(         session = session,         id = \"pb2\",         value = i, total = 100,         title = paste(\"Process\", trunc(i/10))       )       Sys.sleep(0.1)     }   }) }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progressSweetAlert.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress bar in a sweet alert — progressSweetAlert","title":"Progress bar in a sweet alert — progressSweetAlert","text":"Progress bar sweet alert","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progressSweetAlert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress bar in a sweet alert — progressSweetAlert","text":"","code":"progressSweetAlert(   session = getDefaultReactiveDomain(),   id,   value,   total = NULL,   display_pct = FALSE,   size = NULL,   status = NULL,   striped = FALSE,   title = NULL,   ... )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progressSweetAlert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progress bar in a sweet alert — progressSweetAlert","text":"session session object passed function given shinyServer. id id used update progress bar. value Value progress bar 0 100, >100 must provide total. total Used calculate percentage value > 100, force indicator appear top right progress bar. display_pct logical, display percentage progress bar. size Size, NULL default value 'xxs', 'xs', 'sm', work package shinydashboard. status Color, must valid Bootstrap status : primary, info, success, warning, danger. striped logical, add striped effect. title character, optional title. ... Arguments passed sendSweetAlert()","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/progressSweetAlert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress bar in a sweet alert — progressSweetAlert","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")   ui <- fluidPage(   tags$h1(\"Progress bar in Sweet Alert\"),   useSweetAlert(), # /!\\ needed with 'progressSweetAlert'   actionButton(     inputId = \"go\",     label = \"Launch long calculation !\"   ) )  server <- function(input, output, session) {    observeEvent(input$go, {     progressSweetAlert(       session = session, id = \"myprogress\",       title = \"Work in progress\",       display_pct = TRUE, value = 0     )     for (i in seq_len(50)) {       Sys.sleep(0.1)       updateProgressBar(         session = session,         id = \"myprogress\",          value = i*2       )     }     closeSweetAlert(session = session)     sendSweetAlert(       session = session,       title =\" Calculation completed !\",       type = \"success\"     )   })  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/radioGroupButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Buttons Group Radio Input Control — radioGroupButtons","title":"Buttons Group Radio Input Control — radioGroupButtons","text":"Create buttons grouped act like radio buttons.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/radioGroupButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buttons Group Radio Input Control — radioGroupButtons","text":"","code":"radioGroupButtons(   inputId,   label = NULL,   choices = NULL,   selected = NULL,   status = \"default\",   size = \"normal\",   direction = \"horizontal\",   justified = FALSE,   individual = FALSE,   checkIcon = list(),   width = NULL,   choiceNames = NULL,   choiceValues = NULL,   disabled = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/radioGroupButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buttons Group Radio Input Control — radioGroupButtons","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = \"custom-class\", buttons class btn-custom-class. size Size buttons ('xs', 'sm', 'normal', 'lg') direction Horizontal vertical justified TRUE, fill width parent div individual TRUE, buttons separated. checkIcon list, empty must contain least one element named 'yes' corresponding icon display button checked. width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. disabled Initialize buttons disabled state (users able select value).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/radioGroupButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Buttons Group Radio Input Control — radioGroupButtons","text":"buttons group control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/radioGroupButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Buttons Group Radio Input Control — radioGroupButtons","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"radioGroupButtons examples\"),    radioGroupButtons(     inputId = \"somevalue1\",     label = \"Choose a value: \",     choices = c(\"A\", \"B\", \"C\")   ),   verbatimTextOutput(\"value1\"),    radioGroupButtons(     inputId = \"somevalue2\",     label = \"With custom status:\",     choices = names(iris),     status = \"primary\"   ),   verbatimTextOutput(\"value2\"),    radioGroupButtons(     inputId = \"somevalue3\",     label = \"With icons:\",     choices = names(mtcars),     checkIcon = list(       yes = icon(\"square-check\"),       no = icon(\"square\")     )   ),   verbatimTextOutput(\"value3\") )  server <- function(input, output) {    output$value1 <- renderPrint({ input$somevalue1 })   output$value2 <- renderPrint({ input$somevalue2 })   output$value3 <- renderPrint({ input$somevalue3 })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/searchInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Input — searchInput","title":"Search Input — searchInput","text":"text input triggered Enter key pressed search button clicked","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/searchInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Input — searchInput","text":"","code":"searchInput(   inputId,   label = NULL,   value = \"\",   placeholder = NULL,   btnSearch = NULL,   btnReset = NULL,   resetValue = \"\",   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/searchInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Input — searchInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. placeholder character string giving user hint can entered control. btnSearch icon button validate search. btnReset icon button reset search. resetValue Value used reset button clicked, default \"\", NULL value reset. width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/searchInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search Input — searchInput","text":"two buttons ('search' 'reset') act like actionButton, can retrieve value server-side input$<INPUTID>_search input$<INPUTID>_reset.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/searchInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Input — searchInput","text":"","code":"if (interactive()) {   ui <- fluidPage(     tags$h1(\"Search Input\"),     br(),     searchInput(       inputId = \"search\", label = \"Enter your text\",       placeholder = \"A placeholder\",       btnSearch = icon(\"magnifying-glass\"),       btnReset = icon(\"xmark\"),       width = \"450px\"     ),     br(),     verbatimTextOutput(outputId = \"res\")   )    server <- function(input, output, session) {     output$res <- renderPrint({       input$search     })   }    shinyApp(ui = ui, server = server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/selectizeGroup-module.html","id":null,"dir":"Reference","previous_headings":"","what":"Selectize Group — selectizeGroup-module","title":"Selectize Group — selectizeGroup-module","text":"Group mutually dependent selectizeInput filtering data.frame's columns (like Excel).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/selectizeGroup-module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selectize Group — selectizeGroup-module","text":"","code":"selectizeGroupUI(   id,   params,   label = NULL,   btn_label = \"Reset filters\",   inline = TRUE )  selectizeGroupServer(input, output, session, data, vars, inline = TRUE)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/selectizeGroup-module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selectize Group — selectizeGroup-module","text":"id Module's id. params named list parameters passed selectizeInput, can use : inputId (obligatory, must variable name), label, placeholder. label Character, global label top labels. btn_label Character, reset button label. inline TRUE (default), selectizeInputs horizontally positioned, otherwise vertically. Use argument selectizeGroupUI selectizeGroupServer make work properly. input, output, session standards shiny server arguments. data Either data.frame() shiny::reactive() function returning data.frame (use parentheses). vars character, columns use create filters, must correspond variables listed params. Can reactive function, values must included initial ones (params).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/selectizeGroup-module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selectize Group — selectizeGroup-module","text":"shiny::reactive() function containing data filtered.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/selectizeGroup-module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selectize Group — selectizeGroup-module","text":"","code":"# Default -----------------------------------------------------------------  if (interactive()) {    library(shiny)   library(shinyWidgets)    data(\"mpg\", package = \"ggplot2\")    ui <- fluidPage(     fluidRow(       column(         width = 10, offset = 1,         tags$h3(\"Filter data with selectize group\"),         panel(           selectizeGroupUI(             id = \"my-filters\",             params = list(               manufacturer = list(inputId = \"manufacturer\", title = \"Manufacturer:\"),               model = list(inputId = \"model\", title = \"Model:\"),               trans = list(inputId = \"trans\", title = \"Trans:\"),               class = list(inputId = \"class\", title = \"Class:\")             )           ), status = \"primary\"         ),         DT::dataTableOutput(outputId = \"table\")       )     )   )    server <- function(input, output, session) {     res_mod <- callModule(       module = selectizeGroupServer,       id = \"my-filters\",       data = mpg,       vars = c(\"manufacturer\", \"model\", \"trans\", \"class\")     )     output$table <- DT::renderDataTable(res_mod())   }    shinyApp(ui, server)  }  # Select variables --------------------------------------------------------  if (interactive()) {    library(shiny)   library(shinyWidgets)    data(\"mpg\", package = \"ggplot2\")    ui <- fluidPage(     fluidRow(       column(         width = 10, offset = 1,         tags$h3(\"Filter data with selectize group\"),         panel(           checkboxGroupInput(             inputId = \"vars\",             label = \"Variables to use:\",             choices = c(\"manufacturer\", \"model\", \"trans\", \"class\"),             selected = c(\"manufacturer\", \"model\", \"trans\", \"class\"),             inline = TRUE           ),           selectizeGroupUI(             id = \"my-filters\",             params = list(               manufacturer = list(inputId = \"manufacturer\", title = \"Manufacturer:\"),               model = list(inputId = \"model\", title = \"Model:\"),               trans = list(inputId = \"trans\", title = \"Trans:\"),               class = list(inputId = \"class\", title = \"Class:\")             )           ),           status = \"primary\"         ),         DT::dataTableOutput(outputId = \"table\")       )     )   )    server <- function(input, output, session) {      vars_r <- reactive({       input$vars     })      res_mod <- callModule(       module = selectizeGroupServer,       id = \"my-filters\",       data = mpg,       vars = vars_r     )      output$table <- DT::renderDataTable({       req(res_mod())       res_mod()     })   }    shinyApp(ui, server) }  # Subset data -------------------------------------------------------------  if (interactive()) {    library(shiny)   library(shinyWidgets)    data(\"mpg\", package = \"ggplot2\")    ui <- fluidPage(     fluidRow(       column(         width = 10, offset = 1,         tags$h3(\"Filter data with selectize group\"),         panel(           pickerInput(             inputId = \"car_select\",             choices = unique(mpg$manufacturer),             options = list(               `live-search` = TRUE,               title = \"None selected\"             )           ),           selectizeGroupUI(             id = \"my-filters\",             params = list(               manufacturer = list(inputId = \"manufacturer\", title = \"Manufacturer:\"),               model = list(inputId = \"model\", title = \"Model:\"),               trans = list(inputId = \"trans\", title = \"Trans:\"),               class = list(inputId = \"class\", title = \"Class:\")             )           ),           status = \"primary\"         ),         DT::dataTableOutput(outputId = \"table\")       )     )   )    server <- function(input, output, session) {      mpg_filter <- reactive({       subset(mpg, manufacturer %in% input$car_select)     })      res_mod <- callModule(       module = selectizeGroupServer,       id = \"my-filters\",       data = mpg_filter,       vars = c(\"manufacturer\", \"model\", \"trans\", \"class\")     )      output$table <- DT::renderDataTable({       req(res_mod())       res_mod()     })   }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom background color for your shinyapp — setBackgroundColor","title":"Custom background color for your shinyapp — setBackgroundColor","text":"Allow change background color shiny application.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom background color for your shinyapp — setBackgroundColor","text":"","code":"setBackgroundColor(   color = \"ghostwhite\",   gradient = c(\"linear\", \"radial\"),   direction = c(\"bottom\", \"top\", \"right\", \"left\"),   shinydashboard = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom background color for your shinyapp — setBackgroundColor","text":"color Background color. Use either fullname Hex code (https://www.w3schools.com/colors/colors_hex.asp). one color used, gradient background set. gradient Type gradient: linear radial. direction Direction gradient, default bottom. Possibles choices bottom, top, right left, two values can used, e.g. c(\"bottom\", \"right\"). shinydashboard Set TRUE shinydasboard application.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom background color for your shinyapp — setBackgroundColor","text":"","code":"if (interactive()) {  ### Uniform color background :  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Change shiny app background\"),   setBackgroundColor(\"ghostwhite\") )  server <- function(input, output, session) {  }  shinyApp(ui, server)   ### linear gradient background :  library(shiny) library(shinyWidgets)  ui <- fluidPage(    # use a gradient in background   setBackgroundColor(     color = c(\"#F7FBFF\", \"#2171B5\"),     gradient = \"linear\",     direction = \"bottom\"   ),    titlePanel(\"Hello Shiny!\"),   sidebarLayout(     sidebarPanel(       sliderInput(\"obs\",                   \"Number of observations:\",                   min = 0,                   max = 1000,                   value = 500)     ),     mainPanel(       plotOutput(\"distPlot\")     )   ) )  server <- function(input, output, session) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  shinyApp(ui, server)   ### radial gradient background :  library(shiny) library(shinyWidgets)  ui <- fluidPage(    # use a gradient in background   setBackgroundColor(     color = c(\"#F7FBFF\", \"#2171B5\"),     gradient = \"radial\",     direction = c(\"top\", \"left\")   ),    titlePanel(\"Hello Shiny!\"),   sidebarLayout(     sidebarPanel(       sliderInput(\"obs\",                   \"Number of observations:\",                   min = 0,                   max = 1000,                   value = 500)     ),     mainPanel(       plotOutput(\"distPlot\")     )   ) )  server <- function(input, output, session) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom background image for your shinyapp — setBackgroundImage","title":"Custom background image for your shinyapp — setBackgroundImage","text":"Allow change background image shinyapp.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom background image for your shinyapp — setBackgroundImage","text":"","code":"setBackgroundImage(src = NULL, shinydashboard = FALSE)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom background image for your shinyapp — setBackgroundImage","text":"src Url path image, using local image, file must www/ directory path contain www/. shinydashboard Set TRUE shinydasboard application.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/setBackgroundImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom background image for your shinyapp — setBackgroundImage","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Add a shiny app background image\"),   setBackgroundImage(     src = \"https://www.fillmurray.com/1920/1080\"   ) )  server <- function(input, output, session) {  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/shinyWidgets.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyWidgets: Custom inputs widgets for Shiny. — shinyWidgets","title":"shinyWidgets: Custom inputs widgets for Shiny. — shinyWidgets","text":"shinyWidgets package provides several custom widgets extend available package shiny","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/shinyWidgets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"shinyWidgets: Custom inputs widgets for Shiny. — shinyWidgets","text":"","code":"if (interactive()) {   shinyWidgets::shinyWidgetsGallery() }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/shinyWidgetsGallery.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the shinyWidget Gallery — shinyWidgetsGallery","title":"Launch the shinyWidget Gallery — shinyWidgetsGallery","text":"gallery widgets available package.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/shinyWidgetsGallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the shinyWidget Gallery — shinyWidgetsGallery","text":"","code":"shinyWidgetsGallery()"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/shinyWidgetsGallery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the shinyWidget Gallery — shinyWidgetsGallery","text":"","code":"if (interactive()) {   shinyWidgetsGallery()  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/show_toast.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a toast notification — show_toast","title":"Show a toast notification — show_toast","text":"Show toast notification","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/show_toast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a toast notification — show_toast","text":"","code":"show_toast(   title,   text = NULL,   type = c(\"default\", \"success\", \"error\", \"info\", \"warning\", \"question\"),   timer = 3000,   timerProgressBar = TRUE,   position = c(\"bottom-end\", \"top\", \"top-start\", \"top-end\", \"center\", \"center-start\",     \"center-end\", \"bottom\", \"bottom-start\"),   width = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/show_toast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a toast notification — show_toast","text":"title Title toast. text Text toast. type Type toast: \"default\", \"success\", \"error\", \"info\", \"warning\" \"question\". timer Auto close timer modal. Set ms (milliseconds). timerProgressBar set true, timer progress bar bottom popup. position Modal window position, can \"top\", \"top-start\", \"top-end\", \"center\", \"center-start\", \"center-end\", \"bottom\", \"bottom-start\", \"bottom-end\". width Modal window width, including paddings. session session object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/show_toast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a toast notification — show_toast","text":"value.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/show_toast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a toast notification — show_toast","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Sweet Alert Toast\"),   actionButton(     inputId = \"toast\",     label = \"Show default toast\"   ),   actionButton(     inputId = \"success\",     label = \"Show success toast\",     icon = icon(\"check\")   ),   actionButton(     inputId = \"error\",     label = \"Show error toast\",     icon = icon(\"xmark\")   ),   actionButton(     inputId = \"warning\",     label = \"Show warning toast\",     icon = icon(\"triangle-exclamation\")   ),   actionButton(     inputId = \"info\",     label = \"Show info toast\",     icon = icon(\"info\")   ) )  server <- function(input, output, session) {    observeEvent(input$toast, {     show_toast(       title = \"Notification\",       text = \"An imortant message\"     )   })    observeEvent(input$success, {     show_toast(       title = \"Bravo\",       text = \"Well done!\",       type = \"success\"     )   })    observeEvent(input$error, {     show_toast(       title = \"Ooops\",       text = \"It's broken\",       type = \"error\",       width = \"800px\",       position = \"bottom\"     )   })    observeEvent(input$warning, {     show_toast(       title = \"Careful!\",       text = \"Almost broken\",       type = \"warning\",       position = \"top-end\"     )   })    observeEvent(input$info, {     show_toast(       title = \"Heads up\",       text = \"Just a message\",       type = \"info\",       position = \"top-end\"     )   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sliderTextInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Slider Text Input Widget — sliderTextInput","title":"Slider Text Input Widget — sliderTextInput","text":"Constructs slider widget characters instead numeric values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sliderTextInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slider Text Input Widget — sliderTextInput","text":"","code":"sliderTextInput(   inputId,   label,   choices,   selected = NULL,   animate = FALSE,   grid = FALSE,   hide_min_max = FALSE,   from_fixed = FALSE,   to_fixed = FALSE,   from_min = NULL,   from_max = NULL,   to_min = NULL,   to_max = NULL,   force_edges = FALSE,   width = NULL,   pre = NULL,   post = NULL,   dragRange = TRUE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sliderTextInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slider Text Input Widget — sliderTextInput","text":"inputId input slot used access value. label Display label control, NULL label. choices Character vector select value . selected initially selected value, length > 1, create range slider. animate TRUE show simple animation controls default settings, details see sliderInput. grid Logical, show hide ticks marks. hide_min_max Hides min max labels. from_fixed Fix position left (single) handle. to_fixed Fix position right handle. from_min Set minimum limit left handle. from_max Set maximum limit left handle. to_min Set minimum limit right handle. to_max Set maximum limit right handle. force_edges Slider always inside container. width width input, e.g. 400px, 100%. pre prefix string put front value. post suffix string put value. dragRange See argument sliderInput.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sliderTextInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slider Text Input Widget — sliderTextInput","text":"value retrieved server-side character vector.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sliderTextInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slider Text Input Widget — sliderTextInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   br(),   sliderTextInput(     inputId = \"mySliderText\",     label = \"Month range slider:\",     choices = month.name,     selected = month.name[c(4, 7)]   ),   verbatimTextOutput(outputId = \"result\") )  server <- function(input, output, session) {   output$result <- renderPrint(str(input$mySliderText)) }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/spectrumInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Palette Color Picker with Spectrum Library — spectrumInput","title":"Palette Color Picker with Spectrum Library — spectrumInput","text":"widget select color within palettes, options needed.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/spectrumInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Palette Color Picker with Spectrum Library — spectrumInput","text":"","code":"spectrumInput(   inputId,   label,   choices = NULL,   selected = NULL,   flat = FALSE,   options = list(),   update_on = c(\"move\", \"dragstop\", \"change\"),   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/spectrumInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Palette Color Picker with Spectrum Library — spectrumInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List colors display menu. selected initially selected value. flat Display menu inline. options Additional options pass spectrum, possible values described : https://bgrins.github.io/spectrum/#options. update_on update value server-side: \"move\" (default, time new color selected), \"dragstop\" (use user stop dragging cursor), \"change\" (input closed). width width input, e.g. 400px, 100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/spectrumInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Palette Color Picker with Spectrum Library — spectrumInput","text":"selected color Hex format server-side","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/spectrumInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Palette Color Picker with Spectrum Library — spectrumInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\") library(\"scales\")  ui <- fluidPage(   tags$h1(\"Spectrum color picker\"),    br(),    spectrumInput(     inputId = \"myColor\",     label = \"Pick a color:\",     choices = list(       list('black', 'white', 'blanchedalmond', 'steelblue', 'forestgreen'),       as.list(brewer_pal(palette = \"Blues\")(9)),       as.list(brewer_pal(palette = \"Greens\")(9)),       as.list(brewer_pal(palette = \"Spectral\")(11)),       as.list(brewer_pal(palette = \"Dark2\")(8))     ),     options = list(`toggle-palette-more-text` = \"Show more\")   ),   verbatimTextOutput(outputId = \"res\")  )  server <- function(input, output, session) {    output$res <- renderPrint(input$myColor)  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal statistic cards — stati-card","title":"Minimal statistic cards — stati-card","text":"Minimal statistic cards","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal statistic cards — stati-card","text":"","code":"statiCard(   value,   subtitle,   icon = NULL,   left = FALSE,   color = \"steelblue\",   background = \"white\",   animate = FALSE,   duration = 2000,   id = NULL )  updateStatiCard(   id,   value,   duration = 2000,   session = getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal statistic cards — stati-card","text":"value Value display. subtitle subtitle describe value. icon optional icon created icon(). left Display value subtitle right. color Text color. background Background color. animate Add animation value displayed. duration Duration animation. id id can used update card server-side. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal statistic cards — stati-card","text":"UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Minimal statistic cards — stati-card","text":"Based work Dastanbek ArielDavid codepen.io","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/stati-card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal statistic cards — stati-card","text":"","code":"library(shiny) library(shinyWidgets)   ui <- fluidPage(    tags$h2(\"Stati Card\"),    fluidRow(     column(       width = 3,       statiCard(12, \"Subtitle\", icon(\"house\")),       statiCard(         93, \"Animated card\", icon(\"users\"),         background = \"deepskyblue\",         color = \"white\",         animate = TRUE,         id = \"card1\"       ),       actionButton(\"update1\", \"Update card above server-side\"),       statiCard(         93, \"No animation\", icon(\"users\"),         background = \"deepskyblue\",         color = \"white\",         id = \"card2\"       ),       actionButton(\"update2\", \"Update card above server-side\")     ),     column(       width = 3,       statiCard(\"$123,456\", \"Total spend\", icon(\"rocket\"), left = TRUE, animate = TRUE),       tags$br(),       actionButton(\"show\", \"Show card (rendered server-side)\"),       uiOutput(outputId = \"card\")     ),     column(       width = 3,       statiCard(12, \"No animation\", icon(\"house\"), color = \"firebrick\")     ),     column(       width = 3,       statiCard(         \"123456 something very very long\",         \"Long value text\",         icon = NULL,         left = TRUE,         background = \"steelblue\",         color = \"white\"       ),       statiCard(         \"123456 something very very long\",         \"Long value text with icon\",         icon = icon(\"gauge\"),         left = TRUE       ),       statiCard(         \"123456 something very very long\",         \"Long value text with icon right\",         icon = icon(\"list-check\")       )     )   )  )   server <- function(input, output, session) {    observeEvent(input$update1, {     updateStatiCard(       id = \"card1\",       value = sample.int(200, 1)     )   })    observeEvent(input$update2, {     updateStatiCard(       id = \"card2\",       value = sample.int(200, 1)     )   })    output$card <- renderUI({     req(input$show)     statiCard(       format(sample.int(1e6, 1), big.mark = \" \"),       \"Total spend\",       icon(\"cart-shopping\"),       left = TRUE,       animate = TRUE     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert-confirmation.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a confirmation dialog — sweetalert-confirmation","title":"Launch a confirmation dialog — sweetalert-confirmation","text":"Launch popup ask user confirmation.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert-confirmation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a confirmation dialog — sweetalert-confirmation","text":"","code":"confirmSweetAlert(   session = getDefaultReactiveDomain(),   inputId,   title = NULL,   text = NULL,   type = \"question\",   btn_labels = c(\"Cancel\", \"Confirm\"),   btn_colors = NULL,   closeOnClickOutside = FALSE,   showCloseButton = FALSE,   allowEscapeKey = FALSE,   cancelOnDismiss = TRUE,   html = FALSE,   ... )  ask_confirmation(   inputId,   title = NULL,   text = NULL,   type = \"question\",   btn_labels = c(\"Cancel\", \"Confirm\"),   btn_colors = NULL,   closeOnClickOutside = FALSE,   showCloseButton = FALSE,   allowEscapeKey = FALSE,   cancelOnDismiss = TRUE,   html = FALSE,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert-confirmation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a confirmation dialog — sweetalert-confirmation","text":"session session object passed function given shinyServer. inputId input slot used access value. Shiny module, use logic inputs : use namespace UI, server. title Title alert. text Text alert, can contains HTML tags. type Type alert : info, success, warning error. btn_labels Labels buttons, cancel button (FALSE) first confirm button (TRUE). btn_colors Colors buttons. closeOnClickOutside Decide whether user able dismiss modal clicking outside , . showCloseButton Show close button top right corner modal. allowEscapeKey set FALSE, user dismiss popup pressing Esc key. cancelOnDismiss TRUE, dialog dismissed (click outside, close button Esc key) equivalent canceling (input value FALSE), FALSE nothing happen (input value remain NULL). html text contains HTML tags ? ... Additional arguments (used)","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert-confirmation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a confirmation dialog — sweetalert-confirmation","text":"","code":"library(shiny) library(shinyWidgets)   ui <- fluidPage(   tags$h1(\"Ask the user for confirmation\"),   actionButton(     inputId = \"launch\",     label = \"Ask for confirmation\"   ),   verbatimTextOutput(outputId = \"res\"),   uiOutput(outputId = \"count\") )  server <- function(input, output, session) {    # Launch sweet alert confirmation   observeEvent(input$launch, {     ask_confirmation(       inputId = \"myconfirmation\",       title = \"Want to confirm ?\"     )   })    # raw output   output$res <- renderPrint(input$myconfirmation)    # count click   true <- reactiveVal(0)   false <- reactiveVal(0)   observeEvent(input$myconfirmation, {     if (isTRUE(input$myconfirmation)) {       x <- true() + 1       true(x)     } else {       x <- false() + 1       false(x)     }   }, ignoreNULL = TRUE)    output$count <- renderUI({     tags$span(       \"Confirm:\", tags$b(true()),       tags$br(),       \"Cancel:\", tags$b(false())     )   }) }  if (interactive())   shinyApp(ui, server)  # ------------------------------------ library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Ask for confirmation\"),   actionButton(     inputId = \"launch1\",     label = \"Launch confirmation dialog\"   ),   verbatimTextOutput(outputId = \"res1\"),   tags$br(),   actionButton(     inputId = \"launch2\",     label = \"Launch confirmation dialog (with normal mode)\"   ),   verbatimTextOutput(outputId = \"res2\"),   tags$br(),   actionButton(     inputId = \"launch3\",     label = \"Launch confirmation dialog (with HTML)\"   ),   verbatimTextOutput(outputId = \"res3\") )  server <- function(input, output, session) {    observeEvent(input$launch1, {     ask_confirmation(       inputId = \"myconfirmation1\",       type = \"warning\",       title = \"Want to confirm ?\"     )   })   output$res1 <- renderPrint(input$myconfirmation1)    observeEvent(input$launch2, {     ask_confirmation(       inputId = \"myconfirmation2\",       type = \"warning\",       title = \"Are you sure ??\",       btn_labels = c(\"Nope\", \"Yep\"),       btn_colors = c(\"#FE642E\", \"#04B404\")     )   })   output$res2 <- renderPrint(input$myconfirmation2)    observeEvent(input$launch3, {     ask_confirmation(       inputId = \"myconfirmation3\",       title = NULL,       text = tags$b(         icon(\"file\"),         \"Do you really want to delete this file ?\",         style = \"color: #FA5858;\"       ),       btn_labels = c(\"Cancel\", \"Delete file\"),       btn_colors = c(\"#00BFFF\", \"#FE2E2E\"),       html = TRUE     )   })   output$res3 <- renderPrint(input$myconfirmation3)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a Sweet Alert to the user — sweetalert","title":"Display a Sweet Alert to the user — sweetalert","text":"Show alert message user provide feedback.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a Sweet Alert to the user — sweetalert","text":"","code":"sendSweetAlert(   session = getDefaultReactiveDomain(),   title = \"Title\",   text = NULL,   type = NULL,   btn_labels = \"Ok\",   btn_colors = \"#3085d6\",   html = FALSE,   closeOnClickOutside = TRUE,   showCloseButton = FALSE,   width = NULL,   ... )  show_alert(   title = \"Title\",   text = NULL,   type = NULL,   btn_labels = \"Ok\",   btn_colors = \"#3085d6\",   html = FALSE,   closeOnClickOutside = TRUE,   showCloseButton = FALSE,   width = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a Sweet Alert to the user — sweetalert","text":"session session object passed function given shinyServer. title Title alert. text Text alert. type Type alert : info, success, warning error. btn_labels Label(s) button(s), can length 2, case alert two buttons. Use NA buttons.s btn_colors Color(s) buttons. html text contains HTML tags ? closeOnClickOutside Decide whether user able dismiss modal clicking outside , . showCloseButton Show close button top right corner modal. width Width modal (pixel). ... arguments passed JavaScript method.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display a Sweet Alert to the user — sweetalert","text":"function use JavaScript sweetalert2 library, see official documentation https://sweetalert2.github.io/.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/sweetalert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a Sweet Alert to the user — sweetalert","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Sweet Alert examples\"),   actionButton(     inputId = \"success\",     label = \"Launch a success sweet alert\",     icon = icon(\"check\")   ),   actionButton(     inputId = \"error\",     label = \"Launch an error sweet alert\",     icon = icon(\"xmark\")   ),   actionButton(     inputId = \"sw_html\",     label = \"Sweet alert with HTML\",     icon = icon(\"thumbs-up\")   ) )  server <- function(input, output, session) {    observeEvent(input$success, {     show_alert(       title = \"Success !!\",       text = \"All in order\",       type = \"success\"     )   })    observeEvent(input$error, {     show_alert(       title = \"Error !!\",       text = \"It's broken...\",       type = \"error\"     )   })    observeEvent(input$sw_html, {     show_alert(       title = NULL,       text = tags$span(         tags$h3(\"With HTML tags\",                 style = \"color: steelblue;\"),         \"In\", tags$b(\"bold\"), \"and\", tags$em(\"italic\"),         tags$br(),         \"and\",         tags$br(),         \"line\",         tags$br(),         \"breaks\",         tags$br(),         \"and an icon\", icon(\"thumbs-up\")       ),       html = TRUE     )   })  }  if (interactive())   shinyApp(ui, server)  # Ouptut in alert ----  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Click the button to open the alert\"),   actionButton(     inputId = \"sw_html\",     label = \"Sweet alert with plot\"   ) )  server <- function(input, output, session) {    observeEvent(input$sw_html, {     show_alert(       title = \"Yay a plot!\",       text = tags$div(         plotOutput(outputId = \"plot\"),         sliderInput(           inputId = \"clusters\",           label = \"Number of clusters\",           min = 2, max = 6, value = 3, width = \"100%\"         )       ),       html = TRUE,       width = \"80%\"     )   })    output$plot <- renderPlot({     plot(Sepal.Width ~ Sepal.Length,          data = iris, col = Species,          pch = 20, cex = 2)     points(kmeans(iris[, 1:2], input$clusters)$centers,            pch = 4, cex = 4, lwd = 4)   }) }   if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Switch Input Control — switchInput","title":"Bootstrap Switch Input Control — switchInput","text":"Create toggle switch.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Switch Input Control — switchInput","text":"","code":"switchInput(   inputId,   label = NULL,   value = FALSE,   onLabel = \"ON\",   offLabel = \"OFF\",   onStatus = NULL,   offStatus = NULL,   size = \"default\",   labelWidth = \"auto\",   handleWidth = \"auto\",   disabled = FALSE,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Switch Input Control — switchInput","text":"inputId input slot used access value. label Display text center switch. value Initial value (TRUE FALSE). onLabel Text left side switch (TRUE). offLabel Text right side switch (FALSE). onStatus Color (bootstrap status) left side switch (TRUE). offStatus Color (bootstrap status) right side switch (FALSE). size Size buttons ('default', 'mini', 'small', 'normal', 'large'). labelWidth Width center handle pixels. handleWidth Width left right sides pixels. disabled Logical, display toggle switch disabled state?. inline Logical, display toggle switch inline? width width input : 'auto', 'fit', '100px', '75%'.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Switch Input Control — switchInput","text":"switch control can added UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap Switch Input Control — switchInput","text":"information, see project Github https://github.com/Bttstrp/bootstrap-switch.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/switchInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Switch Input Control — switchInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # Examples in the gallery : shinyWidgets::shinyWidgetsGallery()  # Basic usage : ui <- fluidPage(   switchInput(inputId = \"somevalue\"),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderPrint({ input$somevalue }) } shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputAddon.html","id":null,"dir":"Reference","previous_headings":"","what":"Text with Add-on Input Control — textInputAddon","title":"Text with Add-on Input Control — textInputAddon","text":"Create text field add-.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputAddon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text with Add-on Input Control — textInputAddon","text":"","code":"textInputAddon(   inputId,   label,   value = \"\",   placeholder = NULL,   addon,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputAddon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text with Add-on Input Control — textInputAddon","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value.. placeholder character string giving user hint can entered control. addon icon tag, created shiny::icon(). width width input : 'auto', 'fit', '100px', '75%'.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputAddon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text with Add-on Input Control — textInputAddon","text":"switch control can added UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputAddon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text with Add-on Input Control — textInputAddon","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { shinyApp(   ui = fluidPage(     textInputAddon(inputId = \"id\", label = \"Label\", placeholder = \"Username\", addon = icon(\"at\")),     verbatimTextOutput(outputId = \"out\")   ),   server = function(input, output) {     output$out <- renderPrint({       input$id     })   } ) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a text input control with icon(s) — textInputIcon","title":"Create a text input control with icon(s) — textInputIcon","text":"Extend form controls adding text icons , , sides classic textInput.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a text input control with icon(s) — textInputIcon","text":"","code":"textInputIcon(   inputId,   label,   value = \"\",   placeholder = NULL,   icon = NULL,   size = NULL,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a text input control with icon(s) — textInputIcon","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option. icon shiny::icon() (equivalent) list, containing icons text, displayed right left text input. size Size input, default NULL, can \"sm\" (small) \"lg\" (large). width width input, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a text input control with icon(s) — textInputIcon","text":"text input control can added UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/textInputIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a text input control with icon(s) — textInputIcon","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   # Test with different version of Bootstrap   theme = bslib::bs_theme(version = 5),    tags$h2(\"textInputIcon examples\"),   fluidRow(     column(       width = 6,       textInputIcon(         inputId = \"ex1\",         label = \"With an icon\",         icon = icon(\"circle-user\")       ),       verbatimTextOutput(\"res1\"),       textInputIcon(         inputId = \"ex2\",         label = \"With an icon (right)\",         icon = list(NULL, icon(\"circle-user\"))       ),       verbatimTextOutput(\"res2\"),       textInputIcon(         inputId = \"ex3\",         label = \"With text\",         icon = list(\"https://\")       ),       verbatimTextOutput(\"res3\"),       textInputIcon(         inputId = \"ex4\",         label = \"Both side\",         icon = list(icon(\"envelope\"), \"@mail.com\")       ),       verbatimTextOutput(\"res4\"),       textInputIcon(         inputId = \"ex5\",         label = \"Sizing\",         icon = list(icon(\"envelope\"), \"@mail.com\"),         size = \"lg\"       ),       verbatimTextOutput(\"res5\")     )   ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$ex1)   output$res2 <- renderPrint(input$ex2)   output$res3 <- renderPrint(input$ex3)   output$res4 <- renderPrint(input$ex4)   output$res5 <- renderPrint(input$ex5)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/toggleDropdownButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle a dropdown menu — toggleDropdownButton","title":"Toggle a dropdown menu — toggleDropdownButton","text":"Open close dropdown menu server-side.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/toggleDropdownButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle a dropdown menu — toggleDropdownButton","text":"","code":"toggleDropdownButton(inputId, session = getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/toggleDropdownButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle a dropdown menu — toggleDropdownButton","text":"inputId Id dropdown toggle. session Standard shiny session.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/toggleDropdownButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggle a dropdown menu — toggleDropdownButton","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   tags$h2(\"Toggle Dropdown Button\"),   br(),   fluidRow(     column(       width = 6,       dropdownButton(         tags$h3(\"List of Inputs\"),         selectInput(inputId = 'xcol',                     label = 'X Variable',                     choices = names(iris)),         sliderInput(inputId = 'clusters',                     label = 'Cluster count',                     value = 3,                     min = 1,                     max = 9),         actionButton(inputId = \"toggle2\",                      label = \"Close dropdown\"),         circle = TRUE, status = \"danger\",         inputId = \"mydropdown\",         icon = icon(\"gear\"), width = \"300px\"       )     ),     column(       width = 6,       actionButton(inputId = \"toggle1\",                    label = \"Open dropdown\")     )   ) )  server <- function(input, output, session) {    observeEvent(list(input$toggle1, input$toggle2), {     toggleDropdownButton(inputId = \"mydropdown\")   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/tooltipOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tooltip options — tooltipOptions","title":"Tooltip options — tooltipOptions","text":"List options tooltip dropdown menu button.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/tooltipOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tooltip options — tooltipOptions","text":"","code":"tooltipOptions(placement = \"right\", title = \"Params\", html = FALSE)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/tooltipOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tooltip options — tooltipOptions","text":"placement Placement tooltip : right, top, bottom, left. title Text tooltip html Logical, allow HTML tags inside tooltip","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/treeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree Input Widget — treeInput","title":"Tree Input Widget — treeInput","text":"tree input widget allowing select values hierarchical structure.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/treeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree Input Widget — treeInput","text":"","code":"treeInput(   inputId,   label,   choices,   selected = NULL,   closeDepth = 1,   returnValue = c(\"text\", \"id\", \"all\"),   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/treeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree Input Widget — treeInput","text":"inputId input slot used access value. label Display label control, NULL label. choices list list tree structure, see create_tree() examples creating right structure. selected Inital selected values, note use node ID. closeDepth Expand level, default first one visible. returnValue Value returned server-side, default \"text\" node text, possibilities \"id\" (ID provided choices = , one generated) \"\" returned tree element selected. width width input, e.g. 400px, \"100%.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/treeInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree Input Widget — treeInput","text":"shiny.tag object can used UI definition.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/treeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree Input Widget — treeInput","text":"","code":"library(shiny) library(shinyWidgets)  # data cities <- data.frame(   continent = c(\"America\", \"America\", \"America\", \"Africa\",                 \"Africa\", \"Africa\", \"Africa\", \"Africa\",                 \"Europe\", \"Europe\", \"Europe\", \"Antarctica\"),   country = c(\"Canada\", \"Canada\", \"USA\", \"Tunisia\", \"Tunisia\",               \"Tunisia\", \"Algeria\", \"Algeria\", \"Italy\", \"Germany\", \"Spain\", NA),   city = c(\"Trois-Rivières\", \"Québec\", \"San Francisco\", \"Tunis\",            \"Monastir\", \"Sousse\", \"Alger\", \"Oran\", \"Rome\", \"Berlin\", \"Madrid\", NA),   stringsAsFactors = FALSE )  # app ui <- fluidPage(   tags$h2(\"treeInput() example\"),   fluidRow(     column(       width = 4,       treeInput(         inputId = \"ID1\",         label = \"Select cities:\",         choices = create_tree(cities),         selected = \"San Francisco\",         returnValue = \"text\",         closeDepth = 0       ),       verbatimTextOutput(\"res1\")     ),     column(       width = 4,       treeInput(         inputId = \"ID2\",         label = \"Select cities:\",         choices = create_tree(cities),         selected = \"San Francisco\",         returnValue = \"text\",         closeDepth = 1       ),       verbatimTextOutput(\"res2\")     ),     column(       width = 4,       treeInput(         inputId = \"ID3\",         label = \"Select cities:\",         choices = create_tree(cities),         selected = c(\"San Francisco\", \"Monastir\"),         returnValue = \"text\",         closeDepth = 2       ),       verbatimTextOutput(\"res3\")     )   ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$ID1)   output$res2 <- renderPrint(input$ID2)   output$res3 <- renderPrint(input$ID3)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAirDateInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of airDatepickerInput() on the client — updateAirDateInput","title":"Change the value of airDatepickerInput() on the client — updateAirDateInput","text":"Change value airDatepickerInput() client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAirDateInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of airDatepickerInput() on the client — updateAirDateInput","text":"","code":"updateAirDateInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   clear = FALSE,   options = NULL,   show = FALSE,   hide = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAirDateInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of airDatepickerInput() on the client — updateAirDateInput","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. value value set input object. clear Logical, clear previous selected dates. options Options update, see available ones JavaScript documentation show, hide Show / hide datepicker.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAirDateInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of airDatepickerInput() on the client — updateAirDateInput","text":"","code":"if (interactive()) {    demoAirDatepicker(\"update\")  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAutonumericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an Autonumeric Input Object — updateAutonumericInput","title":"Update an Autonumeric Input Object — updateAutonumericInput","text":"Update Autonumeric Input Object","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAutonumericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an Autonumeric Input Object — updateAutonumericInput","text":"","code":"updateAutonumericInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   options = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAutonumericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an Autonumeric Input Object — updateAutonumericInput","text":"session Standard shiny session. inputId id input object. label label set input object. value value set input object. options List additional parameters update, use autonumericInput's arguments.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAutonumericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update an Autonumeric Input Object — updateAutonumericInput","text":"","code":"if (interactive()) {   library(shiny)   library(shinyWidgets)    ui <- fluidPage(     h1(\"AutonumericInput Update Example\"),     br(),     autonumericInput(       inputId = \"id1\",       label = \"Autonumeric Input\",       value = 1234.56,       align = \"center\",       currencySymbol = \"$ \",       currencySymbolPlacement = \"p\",       decimalCharacter = \".\",       digitGroupSeparator = \",\"     ),     verbatimTextOutput(\"res1\"),     actionButton(\"bttn1\", \"Change Input to Euros\"),     actionButton(\"bttn2\", \"Change Input to Dollars\"),     br(),     br(),     sliderInput(\"decimals\", \"Select Number of Decimal Places\",                 value = 2, step = 1, min = 0, max = 6),     actionButton(\"bttn3\", \"Update Number of Decimal Places\")   )    server <- function(input, output, session) {     output$res1 <- renderPrint(input$id1)      observeEvent(input$bttn1, {       updateAutonumericInput(         session = session,         inputId = \"id1\",         label = \"Euros:\",         value = 6543.21,         options = list(           currencySymbol = \"\\u20ac\",           currencySymbolPlacement = \"s\",           decimalCharacter = \",\",           digitGroupSeparator = \".\"         )       )     })     observeEvent(input$bttn2, {       updateAutonumericInput(         session = session,         inputId = \"id1\",         label = \"Dollars:\",         value = 6543.21,         options = list(           currencySymbol = \"$\",           currencySymbolPlacement = \"p\",           decimalCharacter = \".\",           digitGroupSeparator = \",\"         )       )     })     observeEvent(input$bttn3, {       updateAutonumericInput(         session = session,         inputId = \"id1\",         options = list(           decimalPlaces = input$decimals         )       )     })   }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of an awesome checkbox input on the client — updateAwesomeCheckbox","title":"Change the value of an awesome checkbox input on the client — updateAwesomeCheckbox","text":"Change value awesome checkbox input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of an awesome checkbox input on the client — updateAwesomeCheckbox","text":"","code":"updateAwesomeCheckbox(session, inputId, label = NULL, value = NULL)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of an awesome checkbox input on the client — updateAwesomeCheckbox","text":"session standard shiny session inputId id input object. label label set input object. value value set input object.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of an awesome checkbox input on the client — updateAwesomeCheckbox","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")   ui <- fluidPage(   awesomeCheckbox(     inputId = \"somevalue\",     label = \"My label\",     value = FALSE   ),    verbatimTextOutput(outputId = \"res\"),    actionButton(inputId = \"updatevalue\", label = \"Toggle value\"),   textInput(inputId = \"updatelabel\", label = \"Update label\") )  server <- function(input, output, session) {    output$res <- renderPrint({     input$somevalue   })    observeEvent(input$updatevalue, {     updateAwesomeCheckbox(       session = session, inputId = \"somevalue\",       value = as.logical(input$updatevalue %%2)     )   })    observeEvent(input$updatelabel, {     updateAwesomeCheckbox(       session = session, inputId = \"somevalue\",       label = input$updatelabel     )   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckboxGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a awesomeCheckboxGroup input on the client — updateAwesomeCheckboxGroup","title":"Change the value of a awesomeCheckboxGroup input on the client — updateAwesomeCheckboxGroup","text":"Change value awesomeCheckboxGroup input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckboxGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a awesomeCheckboxGroup input on the client — updateAwesomeCheckboxGroup","text":"","code":"updateAwesomeCheckboxGroup(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   status = \"primary\" )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckboxGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a awesomeCheckboxGroup input on the client — updateAwesomeCheckboxGroup","text":"session session object passed function given shinyServer. inputId id input object. label Input label. choices List values show checkboxes . selected values initially selected, . inline TRUE, render choices inline (.e. horizontally) status Color buttons.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeCheckboxGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a awesomeCheckboxGroup input on the client — updateAwesomeCheckboxGroup","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")   ui <- fluidPage(   awesomeCheckboxGroup(     inputId = \"somevalue\",     choices = c(\"A\", \"B\", \"C\"),     label = \"My label\"   ),    verbatimTextOutput(outputId = \"res\"),    actionButton(inputId = \"updatechoices\", label = \"Random choices\"),   textInput(inputId = \"updatelabel\", label = \"Update label\") )  server <- function(input, output, session) {    output$res <- renderPrint({     input$somevalue   })    observeEvent(input$updatechoices, {     updateAwesomeCheckboxGroup(       session = session, inputId = \"somevalue\",       choices = sample(letters, sample(2:6))     )   })    observeEvent(input$updatelabel, {     updateAwesomeCheckboxGroup(       session = session, inputId = \"somevalue\",       label = input$updatelabel     )   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeRadio.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a radio input on the client — updateAwesomeRadio","title":"Change the value of a radio input on the client — updateAwesomeRadio","text":"Change value radio input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeRadio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a radio input on the client — updateAwesomeRadio","text":"","code":"updateAwesomeRadio(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   status = \"primary\",   checkbox = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeRadio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a radio input on the client — updateAwesomeRadio","text":"session session object passed function given shinyServer. inputId id input object. label Input label. choices List values select (elements list named name rather value displayed user) selected initially selected value inline TRUE, render choices inline (.e. horizontally) status Color buttons checkbox Checkbox style","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateAwesomeRadio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a radio input on the client — updateAwesomeRadio","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")   ui <- fluidPage(   awesomeRadio(     inputId = \"somevalue\",     choices = c(\"A\", \"B\", \"C\"),     label = \"My label\"   ),    verbatimTextOutput(outputId = \"res\"),    actionButton(inputId = \"updatechoices\", label = \"Random choices\"),   textInput(inputId = \"updatelabel\", label = \"Update label\") )  server <- function(input, output, session) {    output$res <- renderPrint({     input$somevalue   })    observeEvent(input$updatechoices, {     updateAwesomeRadio(       session = session, inputId = \"somevalue\",       choices = sample(letters, sample(2:6))     )   })    observeEvent(input$updatelabel, {     updateAwesomeRadio(       session = session, inputId = \"somevalue\",       label = input$updatelabel     )   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateCheckboxGroupButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a checkboxes group buttons input on the client — updateCheckboxGroupButtons","title":"Change the value of a checkboxes group buttons input on the client — updateCheckboxGroupButtons","text":"Change value checkbox group buttons input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateCheckboxGroupButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a checkboxes group buttons input on the client — updateCheckboxGroupButtons","text":"","code":"updateCheckboxGroupButtons(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   status = \"default\",   size = \"normal\",   justified = FALSE,   checkIcon = list(),   choiceNames = NULL,   choiceValues = NULL,   disabled = FALSE,   disabledChoices = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateCheckboxGroupButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a checkboxes group buttons input on the client — updateCheckboxGroupButtons","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = \"custom-class\", buttons class btn-custom-class. size Size buttons ('xs', 'sm', 'normal', 'lg') justified TRUE, fill width parent div checkIcon list, empty must contain least one element named 'yes' corresponding icon display button checked. choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. disabled Initialize buttons disabled state (users able select value). disabledChoices Vector specific choices disable.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateCheckboxGroupButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a checkboxes group buttons input on the client — updateCheckboxGroupButtons","text":"","code":"library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   checkboxGroupButtons(     inputId = \"somevalue\",     choices = c(\"A\", \"B\", \"C\"),     label = \"My label\"   ),    verbatimTextOutput(outputId = \"res\"),    actionButton(inputId = \"updatechoices\", label = \"Random choices\"),   pickerInput(     inputId = \"updateselected\",     label = \"Update selected:\",     choices = c(\"A\", \"B\", \"C\"),     multiple = TRUE   ),   actionButton(inputId = \"clear\", label = \"Clear selected\"),   textInput(inputId = \"updatelabel\", label = \"Update label\") )  server <- function(input, output, session) {    output$res <- renderPrint({     input$somevalue   })    observeEvent(input$updatechoices, {     newchoices <- sample(letters, sample(2:6))     updateCheckboxGroupButtons(       session = session,       inputId = \"somevalue\",       choices = newchoices     )     updatePickerInput(       session = session,       inputId = \"updateselected\",       choices = newchoices     )   })    observeEvent(input$updateselected, {     updateCheckboxGroupButtons(       session = session,       inputId = \"somevalue\",       selected = input$updateselected     )   }, ignoreNULL = TRUE, ignoreInit = TRUE)    observeEvent(input$clear, {     updateCheckboxGroupButtons(       session = session,       inputId = \"somevalue\",       selected = character(0)     )   })    observeEvent(input$updatelabel, {     updateCheckboxGroupButtons(       session = session,       inputId = \"somevalue\",       label = input$updatelabel     )   }, ignoreInit = TRUE)  }  if (interactive())   shinyApp(ui = ui, server = server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateKnobInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a knob input on the client — updateKnobInput","title":"Change the value of a knob input on the client — updateKnobInput","text":"Change value knob input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateKnobInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a knob input on the client — updateKnobInput","text":"","code":"updateKnobInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   options = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateKnobInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a knob input on the client — updateKnobInput","text":"session Standard shiny session. inputId id input object. label label set input object. value value set input object. options List additional parameters update, use knobInput's arguments.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateKnobInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a knob input on the client — updateKnobInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   tags$h1(\"knob update examples\"),   br(),    fluidRow(      column(       width = 6,       knobInput(         inputId = \"knob1\", label = \"Update value:\",         value = 75, angleOffset = 90, lineCap = \"round\"       ),       verbatimTextOutput(outputId = \"res1\"),       sliderInput(         inputId = \"upknob1\", label = \"Update knob:\",         min = 0, max = 100, value = 75       )     ),      column(       width = 6,       knobInput(         inputId = \"knob2\", label = \"Update label:\",         value = 50, angleOffset = -125, angleArc = 250       ),       verbatimTextOutput(outputId = \"res2\"),       textInput(inputId = \"upknob2\", label = \"Update label:\")     )    ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$knob1)    observeEvent(input$upknob1, {     updateKnobInput(       session = session,       inputId = \"knob1\",       value = input$upknob1     )   }, ignoreInit = TRUE)     output$res2 <- renderPrint(input$knob2)   observeEvent(input$upknob2, {     updateKnobInput(       session = session,       inputId = \"knob2\",       label = input$upknob2     )   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMaterialSwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a materialSwitch input on the client — updateMaterialSwitch","title":"Change the value of a materialSwitch input on the client — updateMaterialSwitch","text":"Change value materialSwitch input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMaterialSwitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a materialSwitch input on the client — updateMaterialSwitch","text":"","code":"updateMaterialSwitch(session, inputId, value = NULL)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMaterialSwitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a materialSwitch input on the client — updateMaterialSwitch","text":"session session object passed function given shinyServer. inputId id input object. value value set input object.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMultiInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a multi input on the client — updateMultiInput","title":"Change the value of a multi input on the client — updateMultiInput","text":"Change value multi input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMultiInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a multi input on the client — updateMultiInput","text":"","code":"updateMultiInput(   session,   inputId,   label = NULL,   selected = NULL,   choices = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMultiInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a multi input on the client — updateMultiInput","text":"session session object passed function given shinyServer. inputId id input object. label label set. selected values selected. select none, use character(0). choices new choices input.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMultiInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Change the value of a multi input on the client — updateMultiInput","text":"Thanks Ian Fellows one !","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateMultiInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a multi input on the client — updateMultiInput","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  fruits <- c(\"Banana\", \"Blueberry\", \"Cherry\",             \"Coconut\", \"Grapefruit\", \"Kiwi\",             \"Lemon\", \"Lime\", \"Mango\", \"Orange\",             \"Papaya\")  ui <- fluidPage(   tags$h2(\"Multi update\"),   multiInput(     inputId = \"my_multi\",     label = \"Fruits :\",     choices = fruits,     selected = \"Banana\",     width = \"350px\"   ),   verbatimTextOutput(outputId = \"res\"),   selectInput(     inputId = \"selected\",     label = \"Update selected:\",     choices = fruits,     multiple = TRUE   ),   textInput(inputId = \"label\", label = \"Update label:\") )  server <- function(input, output, session) {    output$res <- renderPrint(input$my_multi)    observeEvent(input$selected, {     updateMultiInput(       session = session,       inputId = \"my_multi\",       selected = input$selected     )   })    observeEvent(input$label, {     updateMultiInput(       session = session,       inputId = \"my_multi\",       label = input$label     )   }, ignoreInit = TRUE) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNoUiSliderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a no ui slider input on the client — updateNoUiSliderInput","title":"Change the value of a no ui slider input on the client — updateNoUiSliderInput","text":"Change value ui slider input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNoUiSliderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a no ui slider input on the client — updateNoUiSliderInput","text":"","code":"updateNoUiSliderInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   range = NULL,   disable = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNoUiSliderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a no ui slider input on the client — updateNoUiSliderInput","text":"session session object passed function given shinyServer. inputId id input object. label new label. value new value. range new range, must length 2 c(min, max). disable logical, disable slider, disabled user can longer modify slider value.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNoUiSliderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a no ui slider input on the client — updateNoUiSliderInput","text":"","code":"if (interactive()) {   demoNoUiSlider(\"update\")  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericInputIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a numeric input icon on the client — updateNumericInputIcon","title":"Change the value of a numeric input icon on the client — updateNumericInputIcon","text":"Change value numeric input icon client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericInputIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a numeric input icon on the client — updateNumericInputIcon","text":"","code":"updateNumericInputIcon(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   step = NULL,   icon = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericInputIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a numeric input icon on the client — updateNumericInputIcon","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value. min Minimum allowed value max Maximum allowed value step Interval use stepping min max icon Icon update, note can update icon initialized numericInputIcon().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericInputIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the value of a numeric input icon on the client — updateNumericInputIcon","text":"value.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericInputIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a numeric input icon on the client — updateNumericInputIcon","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   numericInputIcon(     inputId = \"id\",     label = \"With an icon\",     value = 10,     icon = icon(\"percent\")   ),   actionButton(\"updateValue\", \"Update value\"),   actionButton(\"updateIcon\", \"Update icon\"),   verbatimTextOutput(\"value\") )  server <- function(input, output, session) {    output$value <- renderPrint(input$id)    observeEvent(input$updateValue, {     updateNumericInputIcon(       session = session,       inputId = \"id\",       value = sample.int(100, 1)     )   })    observeEvent(input$updateIcon, {     i <- sample(c(\"home\", \"gears\", \"dollar-sign\", \"globe\", \"sliders-h\"), 1)     updateNumericInputIcon(       session = session,       inputId = \"id\",       icon = icon(i)     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericRangeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a numeric range input — updateNumericRangeInput","title":"Change the value of a numeric range input — updateNumericRangeInput","text":"Change value numeric range input","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericRangeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a numeric range input — updateNumericRangeInput","text":"","code":"updateNumericRangeInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericRangeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a numeric range input — updateNumericRangeInput","text":"session session object passed function given shinyServer. inputId input slot used access value. label Display label control, NULL label. value initial value(s) range. numeric vector length one duplicated represent minimum maximum range; numeric vector two minimum maximum set minimum maximum range.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateNumericRangeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a numeric range input — updateNumericRangeInput","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(    tags$br(),    numericRangeInput(     inputId = \"my_id\",     label = \"Numeric Range Input:\",     value = c(100, 400)   ),   verbatimTextOutput(outputId = \"res1\"),   textInput(\"label\", \"Update label:\"),   numericInput(\"val1\", \"Update value 1:\", 100),   numericInput(\"val2\", \"Update value 2:\", 400)  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$my_id)    observeEvent(input$label, {     updateNumericRangeInput(       session = session,       inputId = \"my_id\",       label = input$label     )   }, ignoreInit = TRUE)    observe({     updateNumericRangeInput(       session = session,       inputId = \"my_id\",       value = c(input$val1, input$val2)     )   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePickerInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a select picker input on the client — updatePickerInput","title":"Change the value of a select picker input on the client — updatePickerInput","text":"Change value picker input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePickerInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a select picker input on the client — updatePickerInput","text":"","code":"updatePickerInput(   session,   inputId,   label = NULL,   selected = NULL,   choices = NULL,   choicesOpt = NULL,   options = NULL,   clearOptions = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePickerInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a select picker input on the client — updatePickerInput","text":"session session object passed function given shinyServer. inputId id input object. label Display text center switch. selected new selected value (multiple values multiple = TRUE). reset selected value, case multiple picker, use character(0). choices List values select . elements list named name rather value displayed user. choicesOpt Options choices dropdown menu. options Options picker via pickerOptions. clearOptions Clear previous options, otherwise ones set previously still active.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePickerInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a select picker input on the client — updatePickerInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   tags$h2(\"Update pickerInput\"),    fluidRow(     column(       width = 5, offset = 1,       pickerInput(         inputId = \"p1\",         label = \"classic update\",         choices = rownames(mtcars)       )     ),     column(       width = 5,       pickerInput(         inputId = \"p2\",         label = \"disabled update\",         choices = rownames(mtcars)       )     )   ),    fluidRow(     column(       width = 10, offset = 1,       sliderInput(         inputId = \"up\",         label = \"Select between models with mpg greater than :\",         width = \"50%\",         min = min(mtcars$mpg),         max = max(mtcars$mpg),         value = min(mtcars$mpg),         step = 0.1       )     )   )  )  server <- function(input, output, session) {    observeEvent(input$up, {     mtcars2 <- mtcars[mtcars$mpg >= input$up, ]      # Method 1     updatePickerInput(session = session, inputId = \"p1\",                       choices = rownames(mtcars2))      # Method 2     disabled_choices <- !rownames(mtcars) %in% rownames(mtcars2)     updatePickerInput(       session = session, inputId = \"p2\",       choices = rownames(mtcars),       choicesOpt = list(         disabled = disabled_choices,         style = ifelse(disabled_choices,                        yes = \"color: rgba(119, 119, 119, 0.5);\",                        no = \"\")       )     )   }, ignoreInit = TRUE)  }  shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a pretty checkbox on the client — updatePrettyCheckbox","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckbox","text":"Change value pretty checkbox client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckbox","text":"","code":"updatePrettyCheckbox(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckbox","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. value value set input object.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckbox","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty checkbox update value\"),   br(),    prettyCheckbox(     inputId = \"checkbox1\",     label = \"Update me!\",     shape = \"curve\",     thick = TRUE,     outline = TRUE   ),   verbatimTextOutput(outputId = \"res1\"),   radioButtons(     inputId = \"update\",     label = \"Value to set:\",     choices = c(\"FALSE\", \"TRUE\")   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$checkbox1)    observeEvent(input$update, {     updatePrettyCheckbox(       session = session,       inputId = \"checkbox1\",       value = as.logical(input$update)     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckboxGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a pretty checkbox on the client — updatePrettyCheckboxGroup","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckboxGroup","text":"Change value pretty checkbox client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckboxGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckboxGroup","text":"","code":"updatePrettyCheckboxGroup(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   choiceNames = NULL,   choiceValues = NULL,   prettyOptions = list() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckboxGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckboxGroup","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. choices choices set input object, updating choices reset parameters like status, shape, ... checkboxes, can re-specify (change ) argument prettyOptions. selected value set input object. inline TRUE, render choices inline (.e. horizontally). choiceNames choices names set input object. choiceValues choices values set input object. prettyOptions Arguments passed prettyCheckboxGroup styling checkboxes. can needed update choices.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyCheckboxGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a pretty checkbox on the client — updatePrettyCheckboxGroup","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Update pretty checkbox group\"),   br(),    fluidRow(     column(       width = 6,       prettyCheckboxGroup(         inputId = \"checkgroup1\",         label = \"Update my value!\",         choices = month.name[1:4],         status = \"danger\",         icon = icon(\"xmark\")       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       checkboxGroupInput(         inputId = \"update1\", label = \"Update value :\",         choices = month.name[1:4], inline = TRUE       )     ),     column(       width = 6,       prettyCheckboxGroup(         inputId = \"checkgroup2\",         label = \"Update my choices!\",         thick = TRUE,         choices = month.name[1:4],         animation = \"pulse\",         status = \"info\"       ),       verbatimTextOutput(outputId = \"res2\"),       br(),       actionButton(inputId = \"update2\", label = \"Update choices !\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$checkgroup1)    observeEvent(input$update1, {     if (is.null(input$update1)) {       selected_ <- character(0) # no choice selected     } else {       selected_ <- input$update1     }     updatePrettyCheckboxGroup(       session = session,       inputId = \"checkgroup1\",       selected = selected_     )   }, ignoreNULL = FALSE)    output$res2 <- renderPrint(input$checkgroup2)   observeEvent(input$update2, {     updatePrettyCheckboxGroup(       session = session,       inputId = \"checkgroup2\",       choices = sample(month.name, 4),       prettyOptions = list(animation = \"pulse\", status = \"info\")     )   }, ignoreInit = TRUE)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyRadioButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value pretty radio buttons on the client — updatePrettyRadioButtons","title":"Change the value pretty radio buttons on the client — updatePrettyRadioButtons","text":"Change value pretty radio buttons client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyRadioButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value pretty radio buttons on the client — updatePrettyRadioButtons","text":"","code":"updatePrettyRadioButtons(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   choiceNames = NULL,   choiceValues = NULL,   prettyOptions = list() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyRadioButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value pretty radio buttons on the client — updatePrettyRadioButtons","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. choices choices set input object, updating choices reset parameters like status, shape, ... radio buttons, can re-specify (change ) argument prettyOptions. selected value set input object. inline TRUE, render choices inline (.e. horizontally). choiceNames choices names set input object. choiceValues choices values set input object. prettyOptions Arguments passed prettyRadioButtons styling radio buttons. can needed update choices.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyRadioButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value pretty radio buttons on the client — updatePrettyRadioButtons","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Update pretty radio buttons\"),   br(),    fluidRow(     column(       width = 6,       prettyRadioButtons(         inputId = \"radio1\",         label = \"Update my value!\",         choices = month.name[1:4],         status = \"danger\",         icon = icon(\"xmark\")       ),       verbatimTextOutput(outputId = \"res1\"),       br(),       radioButtons(         inputId = \"update1\", label = \"Update value :\",         choices = month.name[1:4], inline = TRUE       )     ),     column(       width = 6,       prettyRadioButtons(         inputId = \"radio2\",         label = \"Update my choices!\",         thick = TRUE,         choices = month.name[1:4],         animation = \"pulse\",         status = \"info\"       ),       verbatimTextOutput(outputId = \"res2\"),       br(),       actionButton(inputId = \"update2\", label = \"Update choices !\")     )   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$radio1)    observeEvent(input$update1, {     updatePrettyRadioButtons(       session = session,       inputId = \"radio1\",       selected = input$update1     )   }, ignoreNULL = FALSE)    output$res2 <- renderPrint(input$radio2)   observeEvent(input$update2, {     updatePrettyRadioButtons(       session = session,       inputId = \"radio2\",       choices = sample(month.name, 4),       prettyOptions = list(animation = \"pulse\",                            status = \"info\",                            shape = \"round\")     )   }, ignoreInit = TRUE)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettySwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a pretty switch on the client — updatePrettySwitch","title":"Change the value of a pretty switch on the client — updatePrettySwitch","text":"Change value pretty switch client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettySwitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a pretty switch on the client — updatePrettySwitch","text":"","code":"updatePrettySwitch(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettySwitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a pretty switch on the client — updatePrettySwitch","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. value value set input object.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettySwitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a pretty switch on the client — updatePrettySwitch","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty switch update value\"),   br(),    prettySwitch(inputId = \"switch1\", label = \"Update me !\"),   verbatimTextOutput(outputId = \"res1\"),   radioButtons(     inputId = \"update\",     label = \"Value to set:\",     choices = c(\"FALSE\", \"TRUE\")   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$switch1)    observeEvent(input$update, {     updatePrettySwitch(       session = session,       inputId = \"switch1\",       value = as.logical(input$update)     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyToggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a pretty toggle on the client — updatePrettyToggle","title":"Change the value of a pretty toggle on the client — updatePrettyToggle","text":"Change value pretty toggle client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyToggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a pretty toggle on the client — updatePrettyToggle","text":"","code":"updatePrettyToggle(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyToggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a pretty toggle on the client — updatePrettyToggle","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. value value set input object.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updatePrettyToggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a pretty toggle on the client — updatePrettyToggle","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h1(\"Pretty toggle update value\"),   br(),    prettyToggle(     inputId = \"toggle1\",     label_on = \"Checked!\",     label_off = \"Unchecked...\"   ),   verbatimTextOutput(outputId = \"res1\"),   radioButtons(     inputId = \"update\",     label = \"Value to set:\",     choices = c(\"FALSE\", \"TRUE\")   )  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$toggle1)    observeEvent(input$update, {     updatePrettyToggle(       session = session,       inputId = \"toggle1\",       value = as.logical(input$update)     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateRadioGroupButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a radio group buttons input on the client — updateRadioGroupButtons","title":"Change the value of a radio group buttons input on the client — updateRadioGroupButtons","text":"Change value radio group buttons input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateRadioGroupButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a radio group buttons input on the client — updateRadioGroupButtons","text":"","code":"updateRadioGroupButtons(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   status = \"default\",   size = \"normal\",   justified = FALSE,   checkIcon = list(),   choiceNames = NULL,   choiceValues = NULL,   disabled = FALSE,   disabledChoices = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateRadioGroupButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a radio group buttons input on the client — updateRadioGroupButtons","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = \"custom-class\", buttons class btn-custom-class. size Size buttons ('xs', 'sm', 'normal', 'lg') justified TRUE, fill width parent div checkIcon list, empty must contain least one element named 'yes' corresponding icon display button checked. choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples. disabled Logical, disable enable buttons, TRUE users able select value. disabledChoices Vector specific choices disable.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateRadioGroupButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a radio group buttons input on the client — updateRadioGroupButtons","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   radioGroupButtons(     inputId = \"somevalue\",     choices = c(\"A\", \"B\", \"C\"),     label = \"My label\"   ),    verbatimTextOutput(outputId = \"res\"),    actionButton(inputId = \"updatechoices\", label = \"Random choices\"),   pickerInput(     inputId = \"updateselected\", label = \"Update selected:\",     choices = c(\"A\", \"B\", \"C\"), multiple = FALSE   ),   textInput(inputId = \"updatelabel\", label = \"Update label\") )  server <- function(input, output, session) {    output$res <- renderPrint({     input$somevalue   })    observeEvent(input$updatechoices, {     newchoices <- sample(letters, sample(3:7))     updateRadioGroupButtons(       session = session,       inputId = \"somevalue\",       choices = newchoices     )     updatePickerInput(       session = session,       inputId = \"updateselected\",       choices = newchoices     )   })    observeEvent(input$updateselected, {     updateRadioGroupButtons(       session = session, inputId = \"somevalue\",       selected = input$updateselected     )   }, ignoreNULL = TRUE, ignoreInit = TRUE)    observeEvent(input$updatelabel, {     updateRadioGroupButtons(       session = session, inputId = \"somevalue\",       label = input$updatelabel     )   }, ignoreInit = TRUE)  }  if (interactive())   shinyApp(ui = ui, server = server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSearchInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a search input on the client — updateSearchInput","title":"Change the value of a search input on the client — updateSearchInput","text":"Change value search input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSearchInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a search input on the client — updateSearchInput","text":"","code":"updateSearchInput(   session,   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   trigger = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSearchInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a search input on the client — updateSearchInput","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. value value set input object. placeholder placeholder set input object. trigger Logical, update value server-side well.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSearchInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Change the value of a search input on the client — updateSearchInput","text":"default, UI value updated, use trigger = TRUE update UI Server value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSearchInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a search input on the client — updateSearchInput","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Update searchinput\"),   searchInput(     inputId = \"search\", label = \"Enter your text\",     placeholder = \"A placeholder\",     btnSearch = icon(\"magnifying-glass\"),     btnReset = icon(\"xmark\"),     width = \"450px\"   ),   br(),   verbatimTextOutput(outputId = \"res\"),   br(),   textInput(     inputId = \"update_search\",     label = \"Update search\"   ),   checkboxInput(     inputId = \"trigger_search\",     label = \"Trigger update search\",     value = TRUE   ) )  server <- function(input, output, session) {    output$res <- renderPrint({     input$search   })    observeEvent(input$update_search, {     updateSearchInput(       session = session,       inputId = \"search\",       value = input$update_search,       trigger = input$trigger_search     )   }, ignoreInit = TRUE) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSliderTextInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a slider text input on the client — updateSliderTextInput","title":"Change the value of a slider text input on the client — updateSliderTextInput","text":"Change value slider text input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSliderTextInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a slider text input on the client — updateSliderTextInput","text":"","code":"updateSliderTextInput(   session,   inputId,   label = NULL,   selected = NULL,   choices = NULL,   from_fixed = NULL,   to_fixed = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSliderTextInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a slider text input on the client — updateSliderTextInput","text":"session session object passed function given shinyServer. inputId id input object. label label set. selected values selected. choices new choices input. from_fixed Fix left handle (single handle). to_fixed Fix right handle.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSliderTextInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a slider text input on the client — updateSliderTextInput","text":"","code":"if (interactive()) { library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   br(),   sliderTextInput(     inputId = \"mySlider\",     label = \"Pick a month :\",     choices = month.abb,     selected = \"Jan\"   ),   verbatimTextOutput(outputId = \"res\"),   radioButtons(     inputId = \"up\",     label = \"Update choices:\",     choices = c(\"Abbreviations\", \"Full names\")   ) )  server <- function(input, output, session) {   output$res <- renderPrint(str(input$mySlider))    observeEvent(input$up, {     choices <- switch(       input$up,       \"Abbreviations\" = month.abb,       \"Full names\" = month.name     )     updateSliderTextInput(       session = session,       inputId = \"mySlider\",       choices = choices     )   }, ignoreInit = TRUE) }  shinyApp(ui = ui, server = server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSpectrumInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a spectrum input on the client — updateSpectrumInput","title":"Change the value of a spectrum input on the client — updateSpectrumInput","text":"Change value spectrum input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSpectrumInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a spectrum input on the client — updateSpectrumInput","text":"","code":"updateSpectrumInput(session = getDefaultReactiveDomain(), inputId, selected)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSpectrumInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a spectrum input on the client — updateSpectrumInput","text":"session session object passed function given shinyServer. inputId id input object. selected value select.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSpectrumInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a spectrum input on the client — updateSpectrumInput","text":"","code":"if (interactive()) {  library(\"shiny\") library(\"shinyWidgets\")  ui <- fluidPage(   tags$h1(\"Spectrum color picker\"),    br(),    spectrumInput(     inputId = \"myColor\",     label = \"Pick a color:\",     choices = list(       list('black', 'white', 'blanchedalmond', 'steelblue', 'forestgreen')     )   ),   verbatimTextOutput(outputId = \"res\"),   radioButtons(     inputId = \"update\", label = \"Update:\",     choices = c(       'black', 'white', 'blanchedalmond', 'steelblue', 'forestgreen'     )    )  )  server <- function(input, output, session) {    output$res <- renderPrint(input$myColor)    observeEvent(input$update, {     updateSpectrumInput(session = session, inputId = \"myColor\", selected = input$update)   }, ignoreInit = TRUE)  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSwitchInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a switch input on the client — updateSwitchInput","title":"Change the value of a switch input on the client — updateSwitchInput","text":"Change value switch input client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSwitchInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a switch input on the client — updateSwitchInput","text":"","code":"updateSwitchInput(   session = getDefaultReactiveDomain(),   inputId,   value = NULL,   label = NULL,   onLabel = NULL,   offLabel = NULL,   onStatus = NULL,   offStatus = NULL,   disabled = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSwitchInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a switch input on the client — updateSwitchInput","text":"session session object passed function given shinyServer. inputId id input object. value value set input object. label label set input object. onLabel onLabel set input object. offLabel offLabel set input object. onStatus onStatus set input object. offStatus offStatus set input object. disabled Logical, disable state.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateSwitchInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a switch input on the client — updateSwitchInput","text":"","code":"if (interactive()) {   library(\"shiny\")   library(\"shinyWidgets\")     ui <- fluidPage(     tags$h1(\"Update\", tags$code(\"switchInput\")),     br(),     fluidRow(       column(         width = 4,         panel(           switchInput(inputId = \"switch1\"),           verbatimTextOutput(outputId = \"resup1\"),           tags$div(             class = \"btn-group\",             actionButton(               inputId = \"updatevaluetrue\",               label = \"Set to TRUE\"             ),             actionButton(               inputId = \"updatevaluefalse\",               label = \"Set to FALSE\"             )           ),           heading = \"Update value\"         )       ),        column(         width = 4,         panel(           switchInput(inputId = \"switch2\",                       label = \"My label\"),           verbatimTextOutput(outputId = \"resup2\"),           textInput(inputId = \"updatelabeltext\",                     label = \"Update label:\"),           heading = \"Update label\"         )       ),        column(         width = 4,         panel(           switchInput(             inputId = \"switch3\",             onLabel = \"Yeaah\",             offLabel = \"Noooo\"           ),           verbatimTextOutput(outputId = \"resup3\"),           fluidRow(column(             width = 6,             textInput(inputId = \"updateonLabel\",                       label = \"Update onLabel:\")           ),           column(             width = 6,             textInput(inputId = \"updateoffLabel\",                       label = \"Update offLabel:\")           )),           heading = \"Update onLabel & offLabel\"         )       )     ),      fluidRow(column(       width = 4,       panel(         switchInput(inputId = \"switch4\"),         verbatimTextOutput(outputId = \"resup4\"),         fluidRow(           column(             width = 6,             pickerInput(               inputId = \"updateonStatus\",               label = \"Update onStatus:\",               choices = c(\"default\", \"primary\", \"success\",                           \"info\", \"warning\", \"danger\")             )           ),           column(             width = 6,             pickerInput(               inputId = \"updateoffStatus\",               label = \"Update offStatus:\",               choices = c(\"default\", \"primary\", \"success\",                           \"info\", \"warning\", \"danger\")             )           )         ),         heading = \"Update onStatus & offStatusr\"       )     ),      column(       width = 4,       panel(         switchInput(inputId = \"switch5\"),         verbatimTextOutput(outputId = \"resup5\"),         checkboxInput(           inputId = \"disabled\",           label = \"Disabled\",           value = FALSE         ),         heading = \"Disabled\"       )     ))    )    server <- function(input, output, session) {     # Update value     observeEvent(input$updatevaluetrue, {       updateSwitchInput(session = session,                         inputId = \"switch1\",                         value = TRUE)     })     observeEvent(input$updatevaluefalse, {       updateSwitchInput(session = session,                         inputId = \"switch1\",                         value = FALSE)     })     output$resup1 <- renderPrint({       input$switch1     })       # Update label     observeEvent(input$updatelabeltext, {       updateSwitchInput(         session = session,         inputId = \"switch2\",         label = input$updatelabeltext       )     }, ignoreInit = TRUE)     output$resup2 <- renderPrint({       input$switch2     })       # Update onLabel & offLabel     observeEvent(input$updateonLabel, {       updateSwitchInput(         session = session,         inputId = \"switch3\",         onLabel = input$updateonLabel       )     }, ignoreInit = TRUE)     observeEvent(input$updateoffLabel, {       updateSwitchInput(         session = session,         inputId = \"switch3\",         offLabel = input$updateoffLabel       )     }, ignoreInit = TRUE)     output$resup3 <- renderPrint({       input$switch3     })       # Update onStatus & offStatus     observeEvent(input$updateonStatus, {       updateSwitchInput(         session = session,         inputId = \"switch4\",         onStatus = input$updateonStatus       )     }, ignoreInit = TRUE)     observeEvent(input$updateoffStatus, {       updateSwitchInput(         session = session,         inputId = \"switch4\",         offStatus = input$updateoffStatus       )     }, ignoreInit = TRUE)     output$resup4 <- renderPrint({       input$switch4     })       # Disabled     observeEvent(input$disabled, {       updateSwitchInput(         session = session,         inputId = \"switch5\",         disabled = input$disabled       )     }, ignoreInit = TRUE)     output$resup5 <- renderPrint({       input$switch5     })    }    shinyApp(ui = ui, server = server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTextInputIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a text input icon on the client — updateTextInputIcon","title":"Change the value of a text input icon on the client — updateTextInputIcon","text":"Change value text input icon client","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTextInputIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a text input icon on the client — updateTextInputIcon","text":"","code":"updateTextInputIcon(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   icon = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTextInputIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a text input icon on the client — updateTextInputIcon","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option. icon Icon update, note can update icon initialized textInputIcon().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTextInputIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the value of a text input icon on the client — updateTextInputIcon","text":"value.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTextInputIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a text input icon on the client — updateTextInputIcon","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   textInputIcon(     inputId = \"id\",     label = \"With an icon\",     icon = icon(\"circle-user\")   ),   actionButton(\"updateValue\", \"Update value\"),   actionButton(\"updateIcon\", \"Update icon\"),   verbatimTextOutput(\"value\") )  server <- function(input, output, session) {    output$value <- renderPrint(input$id)    observeEvent(input$updateValue, {     updateTextInputIcon(       session = session,       inputId = \"id\",       value = paste(sample(letters, 8), collapse = \"\")     )   })    observeEvent(input$updateIcon, {     i <- sample(c(\"home\", \"gears\", \"dollar-sign\", \"globe\", \"sliders-h\"), 1)     updateTextInputIcon(       session = session,       inputId = \"id\",       icon = icon(i)     )   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTreeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Tree Input — updateTreeInput","title":"Update Tree Input — updateTreeInput","text":"Update treeInput() server.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTreeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Tree Input — updateTreeInput","text":"","code":"updateTreeInput(   inputId,   label = NULL,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTreeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Tree Input — updateTreeInput","text":"inputId id input object. label label set input object. selected values initially selected, . session session object passed function given shinyServer. Default getDefaultReactiveDomain().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTreeInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Tree Input — updateTreeInput","text":"value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateTreeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Tree Input — updateTreeInput","text":"","code":"library(shiny) library(shinyWidgets)  # data cities <- data.frame(   continent = c(\"America\", \"America\", \"America\", \"Africa\",                 \"Africa\", \"Africa\", \"Africa\", \"Africa\",                 \"Europe\", \"Europe\", \"Europe\", \"Antarctica\"),   country = c(\"Canada\", \"Canada\", \"USA\", \"Tunisia\", \"Tunisia\",               \"Tunisia\", \"Algeria\", \"Algeria\", \"Italy\", \"Germany\", \"Spain\", NA),   city = c(\"Trois-Rivières\", \"Québec\", \"San Francisco\", \"Tunis\",            \"Monastir\", \"Sousse\", \"Alger\", \"Oran\", \"Rome\", \"Berlin\", \"Madrid\", NA),   stringsAsFactors = FALSE )  # app ui <- fluidPage(   tags$h2(\"updateTreeInput() example\"),   fluidRow(     column(       width = 6,       treeInput(         inputId = \"ID1\",         label = \"Select cities:\",         choices = create_tree(cities),         returnValue = \"text\"       ),       verbatimTextOutput(\"res1\")     ),     column(       width = 6,       textInput(         inputId = \"label\",         label = \"Update label:\",         value = \"Select cities:\"       ),       checkboxGroupInput(         inputId = \"val_country\",         label = \"Select countries:\",         choices = unique(cities$country),         inline = TRUE       ),       checkboxGroupInput(         inputId = \"val_city\",         label = \"Select cities:\",         choices = unique(cities$city),         inline = TRUE       ),       actionButton(\"clear\", \"Clear selected\")     )   ) )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$ID1)    observe(     updateTreeInput(inputId = \"ID1\", label = input$label)   )    observeEvent(     input$val_country,     updateTreeInput(inputId = \"ID1\", selected = input$val_country)   )    observeEvent(     input$val_city,     updateTreeInput(inputId = \"ID1\", selected = input$val_city)   )    observeEvent(input$clear, {       updateTreeInput(inputId = \"ID1\", selected = character(0))       updateCheckboxGroupInput(inputId = \"val_country\", selected = character(0))       updateCheckboxGroupInput(inputId = \"val_city\", selected = character(0))     }   ) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVerticalTabsetPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Update selected vertical tab — updateVerticalTabsetPanel","title":"Update selected vertical tab — updateVerticalTabsetPanel","text":"Update selected vertical tab","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVerticalTabsetPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update selected vertical tab — updateVerticalTabsetPanel","text":"","code":"updateVerticalTabsetPanel(session, inputId, selected = NULL)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVerticalTabsetPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update selected vertical tab — updateVerticalTabsetPanel","text":"session session object passed function given shinyServer. inputId id verticalTabsetPanel object. selected name tab make active.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVerticalTabsetPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update selected vertical tab — updateVerticalTabsetPanel","text":"","code":"if (interactive()) {  library(shiny) library(shinyWidgets)  ui <- fluidPage(   fluidRow(     column(       width = 10, offset = 1,       tags$h2(\"Update vertical tab panel example:\"),       verbatimTextOutput(\"res\"),       radioButtons(         inputId = \"update\", label = \"Update selected:\",         choices = c(\"Title 1\", \"Title 2\", \"Title 3\"),         inline = TRUE       ),       verticalTabsetPanel(         id = \"TABS\",         verticalTabPanel(           title = \"Title 1\", icon = icon(\"house\", \"fa-2x\"),           \"Content panel 1\"         ),         verticalTabPanel(           title = \"Title 2\", icon = icon(\"map\", \"fa-2x\"),           \"Content panel 2\"         ),         verticalTabPanel(           title = \"Title 3\", icon = icon(\"rocket\", \"fa-2x\"),           \"Content panel 3\"         )       )     )   ) )  server <- function(input, output, session) {   output$res <- renderPrint(input$TABS)   observeEvent(input$update, {     shinyWidgets:::updateVerticalTabsetPanel(       session = session,       inputId = \"TABS\",       selected = input$update     )   }, ignoreInit = TRUE) }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVirtualSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Update virtual select from server — updateVirtualSelect","title":"Update virtual select from server — updateVirtualSelect","text":"Update virtual select server","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVirtualSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update virtual select from server — updateVirtualSelect","text":"","code":"updateVirtualSelect(   inputId,   label = NULL,   choices = NULL,   selected = NULL,   disable = NULL,   disabledChoices = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVirtualSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update virtual select from server — updateVirtualSelect","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . can use: vector use simple vector better performance. named list / named vector way shiny::selectInput() custom formatted list allowing use options, must correspond virtual-select specifications output prepare_choices() selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. disable Disable (TRUE) enable (FALSE) select menu. disabledChoices List disabled option's values. session session object passed function given shinyServer. Default getDefaultReactiveDomain().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVirtualSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update virtual select from server — updateVirtualSelect","text":"value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/updateVirtualSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update virtual select from server — updateVirtualSelect","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Virtual Select (update)\"),    virtualSelectInput(     inputId = \"sel1\",     label = \"Update label:\",     choices = month.name   ),   verbatimTextOutput(\"res1\"),   textInput(\"label_text\", label = \"With text:\"),   textInput(\"label_html\", label = \"With HTML:\"),    virtualSelectInput(     inputId = \"sel2\",     label = \"Update selected value:\",     choices = month.name   ),   verbatimTextOutput(\"res2\"),   radioButtons(\"selected\", \"Selected value:\", month.name, inline = TRUE),    virtualSelectInput(     inputId = \"sel3\",     label = \"Update choices:\",     choices = tolower(month.name)   ),   verbatimTextOutput(\"res3\"),   radioButtons(\"choices\", \"Choices:\", c(\"lowercase\", \"UPPERCASE\"), inline = TRUE),    virtualSelectInput(     inputId = \"sel4\",     label = \"Update choices + selected:\",     choices = tolower(month.name)   ),   verbatimTextOutput(\"res4\"),   radioButtons(\"choices_select\", \"Choices:\", c(\"lowercase\", \"UPPERCASE\"), inline = TRUE),    virtualSelectInput(     inputId = \"sel5\",     label = \"Disable / enable:\",     choices = tolower(month.name)   ),   verbatimTextOutput(\"res5\"),   checkboxInput(\"disable\", \"Disable\", value = FALSE),   checkboxInput(\"disableChoices\", \"Disable march and june\", value = FALSE)  )  server <- function(input, output, session) {   output$res1 <- renderPrint(input$sel1)   observe({     req(input$label_text)     updateVirtualSelect(inputId = \"sel1\", label = input$label_text)   })   observe({     req(input$label_html)     updateVirtualSelect(       inputId = \"sel1\",       label = tags$span(input$label_html, style = \"color: red;\")     )   })    output$res2 <- renderPrint(input$sel2)   observe({     updateVirtualSelect(inputId = \"sel2\", selected = input$selected)   })    output$res3 <- renderPrint(input$sel3)   observe({     if (identical(input$choices, \"lowercase\")) {       updateVirtualSelect(inputId = \"sel3\", choices = tolower(month.name))     } else {       updateVirtualSelect(inputId = \"sel3\", choices = toupper(month.name))     }   })    output$res4 <- renderPrint(input$sel4)   observe({     if (identical(input$choices_select, \"lowercase\")) {       choices <- tolower(month.name)     } else {       choices <- toupper(month.name)     }     selected <- sample(choices, 1)     updateVirtualSelect(inputId = \"sel4\", choices = choices, selected = selected)   })    output$res5 <- renderPrint(input$sel5)   observe({     if (isTRUE(input$disable)) {       updateVirtualSelect(inputId = \"sel5\", disable = TRUE)     } else {       updateVirtualSelect(inputId = \"sel5\", disable = FALSE)     }   })   observe({     if (isTRUE(input$disableChoices)) {       updateVirtualSelect(inputId = \"sel5\", disabledChoices = c(\"march\", \"june\"))     } else {       updateVirtualSelect(inputId = \"sel5\", disabledChoices = character(0))     }   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/useSweetAlert.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Sweet Alert dependencies — useSweetAlert","title":"Load Sweet Alert dependencies — useSweetAlert","text":"function necessary sendSweetAlert, confirmSweetAlert, inputSweetAlert (except want use theme default one), still needed progressSweetAlert.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/useSweetAlert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Sweet Alert dependencies — useSweetAlert","text":"","code":"useSweetAlert(   theme = c(\"sweetalert2\", \"minimal\", \"dark\", \"bootstrap-4\", \"material-ui\", \"bulma\",     \"borderless\"),   ie = FALSE )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/useSweetAlert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Sweet Alert dependencies — useSweetAlert","text":"theme Theme modify alerts appearance. ie Add polyfill work Internet Explorer.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/useSweetAlert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Sweet Alert dependencies — useSweetAlert","text":"","code":"if (interactive()) {    library(shiny)   library(shinyWidgets)    ui <- fluidPage(      useSweetAlert(\"borderless\", ie = TRUE),      tags$h2(\"Sweet Alert examples (with custom theme)\"),     actionButton(       inputId = \"success\",       label = \"Launch a success sweet alert\",       icon = icon(\"check\")     ),     actionButton(       inputId = \"error\",       label = \"Launch an error sweet alert\",       icon = icon(\"xmark\")     ),     actionButton(       inputId = \"sw_html\",       label = \"Sweet alert with HTML\",       icon = icon(\"thumbs-up\")     )   )    server <- function(input, output, session) {      observeEvent(input$success, {       show_alert(         title = \"Success !!\",         text = \"All in order\",         type = \"success\"       )     })      observeEvent(input$error, {       show_alert(         title = \"Error !!\",         text = \"It's broken...\",         type = \"error\"       )     })      observeEvent(input$sw_html, {       show_alert(         title = NULL,         text = tags$span(           tags$h3(\"With HTML tags\",                   style = \"color: steelblue;\"),           \"In\", tags$b(\"bold\"), \"and\", tags$em(\"italic\"),           tags$br(),           \"and\",           tags$br(),           \"line\",           tags$br(),           \"breaks\",           tags$br(),           \"and an icon\", icon(\"thumbs-up\")         ),         html = TRUE       )     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/vertical-tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertical tab panel — vertical-tab","title":"Vertical tab panel — vertical-tab","text":"Vertical tab panel","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/vertical-tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertical tab panel — vertical-tab","text":"","code":"verticalTabsetPanel(   ...,   selected = NULL,   id = NULL,   color = \"#112446\",   contentWidth = 9,   menuSide = \"left\" )  verticalTabPanel(title, ..., value = title, icon = NULL, box_height = \"160px\")"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/vertical-tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertical tab panel — vertical-tab","text":"... verticalTabsetPanel, verticalTabPanel include, later, UI elements. selected value (, none supplied, title) tab selected default. NULL, first tab selected. id provided, can use input$id server logic determine current tabs active. value correspond value argument passed verticalTabPanel. color Color tab panels. contentWidth Width content panel (must 1 12), menu width 12 - contentWidth. menuSide Side menu: right left. title Display title tab. value used yet. icon Optional icon appear tab. box_height Height title box.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/vertical-tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertical tab panel — vertical-tab","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L),   fluidRow(     column(       width = 10, offset = 1,       tags$h2(\"Vertical tab panel example\"),       tags$p(         \"Active tab is:\", uiOutput(\"active\", container = tags$b)       ),       verticalTabsetPanel(         id = \"my_vertical_tab_panel\",         verticalTabPanel(           title = \"Title 1\",           icon = icon(\"house\", \"fa-2x\"),           \"Content panel 1\"         ),         verticalTabPanel(           title = \"Title 2\",           icon = icon(\"map\", \"fa-2x\"),           \"Content panel 2\"         ),         verticalTabPanel(           title = \"Title 3\",           icon = icon(\"rocket\", \"fa-2x\"),           \"Content panel 3\"         )       )     )   ) )  server <- function(input, output, session) {   output$active <- renderUI(input$my_vertical_tab_panel) }  if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual Select Input — virtualSelectInput","title":"Virtual Select Input — virtualSelectInput","text":"select dropdown widget made performance, based virtual-select JavaScript library.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual Select Input — virtualSelectInput","text":"","code":"virtualSelectInput(   inputId,   label,   choices,   selected = NULL,   multiple = FALSE,   search = FALSE,   hideClearButton = !multiple,   autoSelectFirstOption = !multiple,   showSelectedOptionsFirst = FALSE,   showValueAsTags = FALSE,   optionsCount = 10,   noOfDisplayValues = 50,   allowNewOption = FALSE,   disableSelectAll = !multiple,   disableOptionGroupCheckbox = !multiple,   disabled = FALSE,   ...,   stateInput = TRUE,   html = FALSE,   inline = FALSE,   width = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Virtual Select Input — virtualSelectInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . can use: vector use simple vector better performance. named list / named vector way shiny::selectInput() custom formatted list allowing use options, must correspond virtual-select specifications output prepare_choices() selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. multiple selection multiple items allowed? search Enable search feature. hideClearButton Hide clear value button. autoSelectFirstOption Select first option default load. showSelectedOptionsFirst Show selected options top dropbox. showValueAsTags Show selected values tags remove icon. optionsCount .options show viewport. noOfDisplayValues Maximum .values show tooltip multi-select. allowNewOption Allow add new option searching. disableSelectAll Disable select feature multiple select. disableOptionGroupCheckbox Disable option group title checkbox. disabled Disable entire dropdown. ... arguments passed JavaScript method, see virtual-select documentation full list options. stateInput Activate deactivate special input value input$<inputId>_open know menu opened , see details. html Allow usage HTML choices. inline Display inline label . width width input, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Virtual Select Input — virtualSelectInput","text":"shiny.tag object can used UI definition.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Virtual Select Input — virtualSelectInput","text":"State menu (open close) accessible server-side input value: input$<inputId>_open, can TRUE (opened) FALSE (closed) NULL (initialized).","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinyWidgets/reference/virtualSelectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Virtual Select Input — virtualSelectInput","text":"","code":"library(shiny) library(shinyWidgets)  ui <- fluidPage(   tags$h2(\"Virtual Select\"),    fluidRow(     column(       width = 4,       virtualSelectInput(         inputId = \"single\",         label = \"Single select :\",         choices = month.name,         search = TRUE       ),       virtualSelectInput(         inputId = \"multiple\",         label = \"Multiple select:\",         choices = setNames(month.abb, month.name),         multiple = TRUE       )     ),     column(       width = 4,       tags$b(\"Single select :\"),       verbatimTextOutput(\"res_single\"),       tags$b(\"Is virtual select open ?\"),       verbatimTextOutput(outputId = \"res_single_open\"),        tags$br(),        tags$b(\"Multiple select :\"),       verbatimTextOutput(\"res_multiple\"),       tags$b(\"Is virtual select open ?\"),       verbatimTextOutput(outputId = \"res_multiple_open\")     )   )   )  server <- function(input, output, session) {    output$res_single <- renderPrint(input$single)   output$res_single_open <- renderPrint(input$single_open)    output$res_multiple <- renderPrint(input$multiple)   output$res_multiple_open <- renderPrint(input$multiple_open)  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numbers in noUiSliderInput — wNumbFormat","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"Format numbers noUiSliderInput","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"","code":"wNumbFormat(   decimals = NULL,   mark = NULL,   thousand = NULL,   prefix = NULL,   suffix = NULL,   negative = NULL )"},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"decimals number decimals include result. Limited 7. mark decimal separator. Defaults '.' thousand already set '.'. thousand Separator large numbers. example: ' ' result formatted number 1 000 000. prefix string prepend number. Use cases include prefixing money symbols '$' euro sign. suffix number append number. example: ',-'. negative prefix negative values. Defaults '-'.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"named list.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"Performed via wNumb JavaScript library : https://refreshless.com/wnumb/.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/reference/wNumbFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numbers in noUiSliderInput — wNumbFormat","text":"","code":"if (interactive()) {  library( shiny ) library( shinyWidgets )  ui <- fluidPage(   tags$h3(\"Format numbers\"),   tags$br(),    noUiSliderInput(     inputId = \"form1\",     min = 0, max = 10000,     value = 800,     format = wNumbFormat(decimals = 3,                          thousand = \".\",                          suffix = \" (US $)\")   ),   verbatimTextOutput(outputId = \"res1\"),    tags$br(),    noUiSliderInput(     inputId = \"form2\",     min = 1988, max = 2018,     value = 1988,     format = wNumbFormat(decimals = 0,                          thousand = \"\",                          prefix = \"Year: \")   ),   verbatimTextOutput(outputId = \"res2\"),    tags$br()  )  server <- function(input, output, session) {    output$res1 <- renderPrint(input$form1)   output$res2 <- renderPrint(input$form2)  }  shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-080","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.8.0","title":"shinyWidgets 0.8.0","text":"airDatepickerInput() : added argument disabledDaysOfWeek disable day(s) week. materialSwitch() : click label now toggle switch #582. Updated virtual-select-plugin 1.0.39 (fix #601). Updated sweetalert2 v11.7.11. Updated air-datepicker 3.3.5.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.8.0","text":"verticalTabsetPanel() render output content using Bootstrap 5 #570. virtualSelectInput : fixed crash choices=list() #571.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"deprecated-functions-0-8-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions","title":"shinyWidgets 0.8.0","text":"useShinydashboard(), useShinydashboardPlus(), useTablerDash(), useArgonDash(), useBs4Dash(), setShadow(), setSliderColor() deprecated removed future release. selectizeGroupUI/selectizeGroupServer module deprecated, use equivalent Select Group Input Module package datamods","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-076","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.6","title":"shinyWidgets 0.7.6","text":"CRAN release: 2023-01-08 Updated virtual-select-plugin 1.0.37. Updated air-datepicker 3.3.3, fix #553.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-7-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.7.6","text":"verticalTabsetPanel() work bslib using Bootstrap 5 #549.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-075","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.5","title":"shinyWidgets 0.7.5","text":"CRAN release: 2022-11-17 Updated virtual-select-plugin 1.0.34. Updated air-datepicker 3.3.1 language support japanese korean. Updated treeInput() collapse expand methods (javascript).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-7-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.7.5","text":"multiInput() longer renders HTML tags inside values #545. awesomeCheckboxGroup() errors colon choices #543.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-074","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.4","title":"shinyWidgets 0.7.4","text":"CRAN release: 2022-10-05 New widget treeInput() based treejs library. Updated virtual-select-plugin 1.0.33. updateVirtualSelect() new argument disabledChoices disable choices menu. ’s now possible use variable space name selectizeGroup module, thanks @evgeniyftw.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.7.4","text":"switchInput() produced error using bslib::bs_theme(version = \"3\") #528. Fixed bug pickerGroup module using aggregate #491. Fixed highlightedDates longer works airDatePicker() #532.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-073","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.3","title":"shinyWidgets 0.7.3","text":"CRAN release: 2022-08-31 Updated air-datepicker 3.2.1 language support italian arabic. Fixed airDatepickerInput() z-index buttons. dropdown(): added block & no_outline arguments. actionBttn(): added ability pass arguments tag container. autonumericInput(): remove custom CSS styles","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-7-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.7.3","text":"pickerInput’s custom input know menu open closed wasn’t working anymore using updatePickerInput #522","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-072","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.2","title":"shinyWidgets 0.7.2","text":"CRAN release: 2022-08-07 Updated air-datepicker library latest version (3.2.0), updating bindings use dayjs manipulate date. updateNoUiSliderInput(): new argument label = update widget’s label.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"breaking-changes-0-7-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"shinyWidgets 0.7.2","text":"airDatepickerInput(): argument dateFormat new notation, default value changed yyyy-mm-dd yyyy-MM-dd. See https://air-datepicker.com/docs?scrollTo=dateFormat potential alues.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-071","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.1","title":"shinyWidgets 0.7.1","text":"CRAN release: 2022-07-13 Updated virtual-select-plugin 1.0.30 pickerInput bindings: fixed update method using Bootstrap 5. virtualSelectInput state (opened closed) now available input$<inputId>_open.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-070","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.7.0","title":"shinyWidgets 0.7.0","text":"CRAN release: 2022-05-11 New widget virtualSelectInput(), select dropdown widget support lot choices, based virtual-select JavaScript library. Updated bootstrap-select v1.14.0-beta3, make pickerInput() works Bootstrap 5. Updated alert() panel() Bootstrap utilities work Bootstrap 5.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.7.0","text":"Removed formula argument aggregate() accomode R 4.2.0 (fix #491)","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-064","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.6.4","title":"shinyWidgets 0.6.4","text":"CRAN release: 2022-02-06","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-6-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.6.4","text":"Revert bootstrap-switch-js 3.3.4 fix bug value = TRUE. Fixed bug colorSelectorInput() causing returning input value.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-063","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.6.3","title":"shinyWidgets 0.6.3","text":"CRAN release: 2022-01-10 radioGroupButtons() checkboxGroupButtons() textInputIcon() numericInputIcon() checkboxGroupButtons()/radioGroupButtons(): status argument now accept vector, thanks @jassler (#440) downloadBttn() now icon argument. switchInput() now themable {bslib}, thanks @AshesITR (#454)","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-6-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.6.3","text":"updateNumericRangeInput() failed correctly update label (#441) verticalTabsetPanel() didn’t work inside renderUI one panel (#446) statiCard(): fixed rendering renderUI value displayed animation interrupted (#406, #407) checkboxGroupButtons()/radioGroupButtons() fixed justified = TRUE argument compatibility Bootstrap 4 (fix #423)","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-062","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.6.2","title":"shinyWidgets 0.6.2","text":"CRAN release: 2021-09-17 numericRangeInput(): added min, max, step arguments. shinyWidgetsGallery(): switch Font-Awesome 5 icon names (accomodate Shiny 1.7.0).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-061","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.6.1","title":"shinyWidgets 0.6.1","text":"CRAN release: 2021-09-06 Add transparent border setSliderColor(), thanks @shannonpileggi (#396) Add commas value total progressBar(), thanks @swsoyee (#388) Add position absolute awesomeCheckboxGroup(), thanks @MayaGans (#390) autonumericInput(): distinguish input input=0, see #384 Update disabledDates argument’s behavior updateAirDateInput(), see #379 Updated sweetalert2 dependencies 11.1.4 inputSweetAlert(): added email url types. inputSweetAlert(): allow javascript code, example use argument inputValidator function.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-060","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.6.0","title":"shinyWidgets 0.6.0","text":"CRAN release: 2021-03-15 {bslib} support pretty***() awesome***() functions. Update work {shinydashboardPlus} 2.0.0 updateAirDateInput() new arguments show hide show/hide picker server. New colorPickr() function: color picker based https://github.com/Simonwep/pickr. Updated skins available chooseSliderSkin().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-057","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.7","title":"shinyWidgets 0.5.7","text":"CRAN release: 2021-02-03 Fixed chooseSliderSkin() work shiny > 1.6.0 Temporary fix pickerInput() work shiny > 1.6.0 (fixed dev version shiny). airDatepickerInput() new argument highlightedDates mark dates calendar specific. Fixed timezone issues updateAirDateInput() @ericnewkirk.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-056","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.6","title":"shinyWidgets 0.5.6","text":"CRAN release: 2021-01-20 Fixed failing test upcoming shiny release","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-055","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.5","title":"shinyWidgets 0.5.5","text":"CRAN release: 2021-01-13 show_alert(), sendSweetAlert() inputSweetAlert() now accept parameters directly passed JavaScript method. New function statiCard() create minimal statistic cards. airDatepicker() now support italian, thanks @ClaudioZandonella.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-054","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.4","title":"shinyWidgets 0.5.4","text":"CRAN release: 2020-10-06 New functions: currencyInput(), formatNumericInput() autonumericInput() enter numeric value specified format like currency, @srmatth. Ability update icons updateNumericInputIcon() updateTextInputIcon(). SweetAlert family: upgraded 9.17.1 added polyfill work Internet Explorer (see useSweetAlert()).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-5-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.5.4","text":"Disable radioGroupButtons() checkboxGroupButtons() checkIcon working properly (#311)","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-053","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.3","title":"shinyWidgets 0.5.3","text":"CRAN release: 2020-06-01 Fixed airDatepickerInput() z-index issue (causing incorrect display modal sidebar). Fixed bug downloadBttn() causing download triggered twice. Added ability disable completely partially radioGroupButtons() checkboxGroupButtons() via respective update methods. UI validation numericInputIcon() min /max provided value outside range.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-052","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.2","title":"shinyWidgets 0.5.2","text":"CRAN release: 2020-05-14 New function execute_safely() display message case error don’t stop application. onlyTimepicker: display time picker part widget. firstDay: day index week started knobInput() two new arguments : pre post add prefix/suffix value displayed. Updated awesome*() dependencies. update dependencies 9.10.13 New function show_toast() display toast notification. New functions show_alert() ask_confirmation() aliases sendSweetAlert() confirmSweetAlert() optional session argument.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.5.2","text":"Changes dropMenu() bindings work inputs updates. downloadBttn() worked clicking label, now can click full button #271.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-051","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.1","title":"shinyWidgets 0.5.1","text":"CRAN release: 2020-03-04 Added two new functions : textInputIcon() (replacement textInputAddon()) numericInputIcon() display icon(s) along text numeric inputs. Internal rewrite airDatepickerInput, breaking change intended, encounter troubles please open issue. airDatepickerInput() new argument startView set view displayed date picker openned. New function dropMenu, robust customizable replacement dropdown() dropdownMenu(). Fixed encoding bug updatePickerInput().","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-050","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.5.0","title":"shinyWidgets 0.5.0","text":"CRAN release: 2019-11-18 selectizeGroupServer()(module selectizeGroup) now accept reactive data reactive vars arguments, see examples details ?selectizeGroupServer. Internal optimization pickerInput large list choices. pickerInput()’s choicesOpt argument now accept element tokens can use declare keywords live-search. pickerUpdate() : updated dependencies & bindings, now live-search & multiple selection works fine together #142. useSweetAlert() now accept theme argument customize Sweet Alerts appearance (e.g. sendSweetAlert example). updateMulti() preserve character encoding #232. Fixed bug verticalTabPanel() preventing outputs displayed #237.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-049","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.9","title":"shinyWidgets 0.4.9","text":"CRAN release: 2019-09-10 Update SweetAlert2: options available sendSweetAlert(), confirmSweetAlert(), inputSweetAlert(). add useTablerDash() import functions tablerDash. updateProgressBar(), confirmSweetAlert(), inputSweetAlert() now module friendly, thanks @AshesITR. add inline = TRUE/FALSE argument dropdownButton(): return either span div element. can now use DT::datatable() pagination inside dropdown(). Removed extra margins (top bottom, 3px ) radioGroupButtons() checkboxGroupButtons(). add inline = TRUE/FALSE argument pickerGroupUI(): put pickers side--side (default) one top .","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-048","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.8","title":"shinyWidgets 0.4.8","text":"CRAN release: 2019-03-18 Remove unit test compatible upcoming version Shiny.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-047","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.7","title":"shinyWidgets 0.4.7","text":"CRAN release: 2019-03-12 add useArgonDash import functions argonDash. add useBs4Dash import functions bs4Dash. Fix updating searchInput label & placeholder modules. Fix issue ghost sidebar useShinydashboard. Fix issue updating prettyRadio & prettyCheckbox icons.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-045","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.5","title":"shinyWidgets 0.4.5","text":"CRAN release: 2019-02-18 Fix bug awesome* widgets due FontAwesome upgrade Shiny @AshesITR. New methods mutating vertical tabs (appendVerticalTab, removeVerticalTab, reorderVerticalTabs) @ifellows New widget numericRangeInput @wkdavis.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-044","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.4","title":"shinyWidgets 0.4.4","text":"CRAN release: 2018-11-05 New function updateMultiInput updating multiInput, thanks @ifellows. New function updateVerticalTabsetPanel updating verticalTabsetPanel. Update options knobInput airDatepickerInput. Custom unit & range progress bars (arguments unit_mark & range_value progressBar). Argument update_on choose trigger update server-side spectrumInput. Vertical layout selectizeGroup. New function pickerOptions help using pickerInput options argument. Bug fix size argument actionGroupButtons. dropdown button act like actionButton (behavior dropdownButton) Update Bootstrap-Select JavaScript library 1.12.4 1.13.3 (used pickerInput).","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-043","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.3","title":"shinyWidgets 0.4.3","text":"CRAN release: 2018-05-30 New functions customize sliderInput : chooseSliderSkin setSliderColor @DivadNojnarg. New function downloadBttn, downloadButton custom appearance. New widget airDatepickerInput, select single, multiple range dates. can also select time. two shortcuts select months years. New function add spinners outputs recalculating. New function useShinydashboard use functions ‘shinydashboard’ classic ‘shiny’ app, specifically valueBox, infoBox box. New functions setBackgroundColor setBackgroundImage change background color use image, @DivadNojnarg.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-042","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.2","title":"shinyWidgets 0.4.2","text":"CRAN release: 2018-03-30 New function updateSearchInput update searchInput server-side #52. New argument inline prettySwitch, prettyToggle prettyCheckbox position checkboxes side side. New argument html confirmSweetAlert sendSweetAlert pass HTML tags alert window #48. New Shiny modules create dependent select menu : selectizeGroup pickerGroup. New widget : noUiSlider, minimal slider range numeric values.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-041","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.1","title":"shinyWidgets 0.4.1","text":"CRAN release: 2018-01-28 New functions Sweet Alert : confirmSweetAlert (confirmation dialog box), inputSweetAlert (text input dialog box), progressSweetAlert (progress bar popup). Update Sweet Alert library 2.O sendSweetAlert works without using useSweetAlert UI. Update multi.js 0.2.4 Update bootstrap switch 3.3.4 Change minimal version R 3.3.1 Function toggle dropdown server-side : toggleDropdownButton. Bug fixes : * Fix logic btn-size class added button @coolbutuseless. * Bug dependencies pretty* bttn.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-040","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.4.0","title":"shinyWidgets 0.4.0","text":"CRAN release: 2017-11-16 New widget : spectrumInput choosing colors palettes custom one. New widgets : prettyCheckbox, prettySwitch, prettyToggle, prettyCheckboxGroup prettyRadioButtons create pretty checkboxes, toggle switch, radio buttons colors, icons lot options. New widget : knobInput round slider, thanks @DivadNojnarg. Bug fixes: * Bug initializing (modal window renderUI) pickerInput switchInput. * awesomeCheckboxGroup working inline = FALSE, thanks @meganhartwell-stemcell, @dStudio-git, @Nicolabo report . * Weird behavior inputs dropdown reported @markdumke.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-036","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.3.6","title":"shinyWidgets 0.3.6","text":"CRAN release: 2017-10-19 New widget : sliderTextInput : slider character vector. New arguments choiceNames & choiceValues checkboxGroupButtons & radioGroupButtons easily pass HTML names displayed buttons. New argument inline materialSwitch, thanks @FrissAnalytics.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-035","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.3.5","title":"shinyWidgets 0.3.5","text":"CRAN release: 2017-10-06 Support bookmarking state. Support tooltip bsplus. Upgrade pickerInput bootstrap-select 1.12.4. Upgrade switchInput bootstrap-switch 3.3.4. Remove receiveSweetAlert simpler use useSweetAlert. Add inline argument materialSwitch (#17). Display code dropdowns gallery.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-034","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.3.4","title":"shinyWidgets 0.3.4","text":"CRAN release: 2017-08-15 release fix bug gallery add tests.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyWidgets 0.3.4","text":"Fix bug checkboxGroupButtons individual = TRUE, causing shinyWidgetsGallery launch.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-033","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.3.3","title":"shinyWidgets 0.3.3","text":"CRAN release: 2017-08-07 Several updates methods implemented.","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"new-features-0-3-3","dir":"Changelog","previous_headings":"","what":"New features","title":"shinyWidgets 0.3.3","text":"Add function updateAwesomeCheckbox updating single awesome checkbox. New function panel create similar panel shinydashboard. New arguments examples updateSwitchInput, updateRadioGroupButtons, updateCheckboxGroupButtons, updateAwesomeRadio, updateAwesomeCheckboxGroup","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"minor-new-features-and-improvements-0-3-3","dir":"Changelog","previous_headings":"","what":"Minor new features and improvements","title":"shinyWidgets 0.3.3","text":"Buttons searchInput now actionButton, see #11","code":""},{"path":"https://dreamrs.github.io/shinyWidgets/news/index.html","id":"shinywidgets-032","dir":"Changelog","previous_headings":"","what":"shinyWidgets 0.3.2","title":"shinyWidgets 0.3.2","text":"CRAN release: 2017-07-24 Better documentation examples. Alternative function create dropdown. New function colorSelector.","code":""}]
